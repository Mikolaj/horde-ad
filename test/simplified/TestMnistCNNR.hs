{-# LANGUAGE ImpredicativeTypes #-}
{-# OPTIONS_GHC -fplugin GHC.TypeLits.KnownNat.Solver #-}
{-# OPTIONS_GHC -fconstraint-solver-iterations=0 #-}
module TestMnistCNNR
  ( testTrees
  ) where

import Prelude

import           Control.Monad (foldM, unless)
import qualified Data.Array.DynamicS as OD
import qualified Data.Array.RankedS as OR
import qualified Data.Array.ShapedS as OS
import           Data.Bifunctor.Flip
import qualified Data.EnumMap.Strict as EM
import qualified Data.Strict.IntMap as IM
import qualified Data.Vector.Generic as V
import           GHC.TypeLits (Nat, SomeNat (..), someNatVal)
import           System.IO (hPutStrLn, stderr)
import           System.Random
import           Test.Tasty
import           Test.Tasty.HUnit hiding (assert)
import           Text.Printf

import HordeAd.Core.Adaptor
import HordeAd.Core.Ast
import HordeAd.Core.AstFreshId
import HordeAd.Core.AstInterpret
import HordeAd.Core.AstPrettyPrint
import HordeAd.Core.AstSimplify
import HordeAd.Core.DualNumber (ADVal)
import HordeAd.Core.Engine
import HordeAd.Core.SizedIndex
import HordeAd.Core.TensorADVal
import HordeAd.Core.TensorClass
import HordeAd.Core.Types
import HordeAd.External.Optimizer
import HordeAd.External.OptimizerTools

import EqEpsilon

import qualified MnistCnnRanked2
import           MnistData

testTrees :: [TestTree]
testTrees = [ tensorADValMnistTestsCNNA
            , tensorADValMnistTestsCNNI
            , tensorADValMnistTestsCNNO
            , tensorMnistTestsPP
            ]

-- POPL differentiation, straight via the ADVal instance of Tensor
mnistTestCaseCNNA
  :: forall ranked r.
     ( ranked ~ Flip OR.Array
     , ADReady ranked r, Random r, ADReady (ADVal ranked) r
     , PrintfArg r, AssertEqualUpToEpsilon r )
  => String
  -> Int -> Int -> Int -> Int -> Int -> Int -> Int -> Int -> r
  -> TestTree
mnistTestCaseCNNA prefix epochs maxBatches kh kw c_out n_hidden
                  miniBatchSize totalBatchSize expected =
  let valsInit :: MnistCnnRanked2.ADCnnMnistParameters ranked r
      valsInit =
        case ( someNatVal $ toInteger kh
             , someNatVal $ toInteger kw
             , someNatVal $ toInteger c_out
             , someNatVal $ toInteger n_hidden ) of
          ( Just (SomeNat @kh _), Just (SomeNat @kw _)
           ,Just (SomeNat @c_out _), Just (SomeNat @n_hidden _) ) ->
            shapedToRanked $ fst
            $ randomVals @(MnistCnnRanked2.ADCnnMnistParametersShaped
                             (Flip OS.Array) SizeMnistHeight SizeMnistWidth
                             kh kw c_out n_hidden r)
                0.4 (mkStdGen 44)
          _ -> error "impossible someNatVal error"
      domainsInit = toDomains valsInit
      name = prefix ++ ": "
             ++ unwords [ show epochs, show maxBatches
                        , show kh, show kw, show c_out, show n_hidden
                        , show miniBatchSize
                        , show (V.length domainsInit)
                        , show (sizeDomainsOD domainsInit) ]
      ftest :: Int -> MnistDataBatchR r -> DomainsOD -> r
      ftest miniBatchSize' mnist testParams =
        MnistCnnRanked2.convMnistTestR miniBatchSize' mnist
          (\f -> runFlip $ f $ parseDomains valsInit testParams)
  in testCase name $ do
       hPutStrLn stderr $
         printf "\n%s: Epochs to run/max batches per epoch: %d/%d"
                prefix epochs maxBatches
       trainData <- map rankBatch
                    <$> loadMnistData trainGlyphsPath trainLabelsPath
       testData <- map rankBatch . take (totalBatchSize * maxBatches)
                   <$> loadMnistData testGlyphsPath testLabelsPath
       let testDataR = packBatchR testData
           runBatch :: (DomainsOD, StateAdam) -> (Int, [MnistDataR r])
                    -> IO (DomainsOD, StateAdam)
           runBatch !(!parameters, !stateAdam) (k, chunk) = do
             let f :: MnistDataBatchR r -> Domains (ADValClown OD.Array)
                   -> ADVal ranked r 0
                 f (glyphR, labelR) adinputs =
                   MnistCnnRanked2.convMnistLossFusedR
                     miniBatchSize (tconst glyphR, tconst labelR)
                     (parseDomains valsInit adinputs)
                 chunkR = map packBatchR
                          $ filter (\ch -> length ch == miniBatchSize)
                          $ chunksOf miniBatchSize chunk
                 res@(parameters2, _) = sgdAdam f chunkR parameters stateAdam
                 !trainScore =
                   ftest (length chunk) (packBatchR chunk) parameters2
                 !testScore =
                   ftest (totalBatchSize * maxBatches) testDataR parameters2
                 !lenChunk = length chunk
             unless (n_hidden < 10) $ do
               hPutStrLn stderr $ printf "\n%s: (Batch %d with %d points)" prefix k lenChunk
               hPutStrLn stderr $ printf "%s: Training error:   %.2f%%" prefix ((1 - trainScore) * 100)
               hPutStrLn stderr $ printf "%s: Validation error: %.2f%%" prefix ((1 - testScore ) * 100)
             return res
       let runEpoch :: Int -> (DomainsOD, StateAdam) -> IO DomainsOD
           runEpoch n (params2, _) | n > epochs = return params2
           runEpoch n !paramsStateAdam@(!_, !_) = do
             unless (n_hidden < 10) $
               hPutStrLn stderr $ printf "\n%s: [Epoch %d]" prefix n
             let trainDataShuffled = shuffle (mkStdGen $ n + 5) trainData
                 chunks = take maxBatches
                          $ zip [1 ..]
                          $ chunksOf totalBatchSize trainDataShuffled
             res <- foldM runBatch paramsStateAdam chunks
             runEpoch (succ n) res
       res <- runEpoch 1 (domainsInit, initialStateAdam domainsInit)
       let testErrorFinal =
             1 - ftest (totalBatchSize * maxBatches) testDataR res
       testErrorFinal @?~ expected

{-# SPECIALIZE mnistTestCaseCNNA
  :: String
  -> Int -> Int -> Int -> Int -> Int -> Int -> Int -> Int -> Double
  -> TestTree #-}

tensorADValMnistTestsCNNA :: TestTree
tensorADValMnistTestsCNNA = testGroup "CNN ADVal MNIST tests"
  [ mnistTestCaseCNNA "CNNA 1 epoch, 1 batch" 1 1 2 2 4 4 1 1
                       (1 :: Double)
  , mnistTestCaseCNNA "CNNA artificial 1 2 3 4 5" 1 1 2 3 4 5 1 1
                       (1 :: Float)
  , mnistTestCaseCNNA "CNNA artificial 5 4 3 2 1" 1 4 3 2 1 1 1 1
                       (1 :: Double)
  , mnistTestCaseCNNA "CNNA 1 epoch, 0 batch" 1 0 4 4 64 16 5 50
                       (1.0 :: Float)
  ]

-- POPL differentiation, Ast term defined only once but differentiated each time
mnistTestCaseCNNI
  :: forall ranked r.
     ( ranked ~ Flip OR.Array
     , ADReady ranked r, Random r
     , PrintfArg r, AssertEqualUpToEpsilon r )
  => String
  -> Int -> Int -> Int -> Int -> Int -> Int -> Int -> Int -> r
  -> TestTree
mnistTestCaseCNNI prefix epochs maxBatches kh kw c_out n_hidden
                  miniBatchSize totalBatchSize expected =
  let valsInit :: MnistCnnRanked2.ADCnnMnistParameters ranked r
      valsInit =
        case ( someNatVal $ toInteger kh
             , someNatVal $ toInteger kw
             , someNatVal $ toInteger c_out
             , someNatVal $ toInteger n_hidden ) of
          ( Just (SomeNat @kh _), Just (SomeNat @kw _)
           ,Just (SomeNat @c_out _), Just (SomeNat @n_hidden _) ) ->
            shapedToRanked $ fst
            $ randomVals @(MnistCnnRanked2.ADCnnMnistParametersShaped
                             (Flip OS.Array) SizeMnistHeight SizeMnistWidth
                             kh kw c_out n_hidden r)
                0.4 (mkStdGen 44)
          _ -> error "impossible someNatVal error"
      domainsInit = toDomains valsInit
      name = prefix ++ ": "
             ++ unwords [ show epochs, show maxBatches
                        , show kh, show kw, show c_out, show n_hidden
                        , show miniBatchSize
                        , show (V.length domainsInit)
                        , show (sizeDomainsOD domainsInit) ]
      ftest :: Int -> MnistDataBatchR r -> DomainsOD -> r
      ftest miniBatchSize' mnist testParams =
        MnistCnnRanked2.convMnistTestR miniBatchSize' mnist
          (\f -> runFlip $ f $ parseDomains valsInit testParams)
  in testCase name $ do
       hPutStrLn stderr $
         printf "\n%s: Epochs to run/max batches per epoch: %d/%d"
                prefix epochs maxBatches
       trainData <- map rankBatch
                    <$> loadMnistData trainGlyphsPath trainLabelsPath
       testData <- map rankBatch . take (totalBatchSize * maxBatches)
                   <$> loadMnistData testGlyphsPath testLabelsPath
       let testDataR = packBatchR testData
           (vars1, asts1) = funToAst2 domainsInit
           doms = V.fromList asts1
       (varGlyph, _, astGlyph) <-
         funToAstIOR
           (miniBatchSize :$ sizeMnistHeightInt :$ sizeMnistWidthInt :$ ZS)
           id
       (varLabel, _, astLabel) <-
         funToAstIOR (miniBatchSize :$ sizeMnistLabelInt :$ ZS) id
       let ast :: AstRanked r 0
           ast = MnistCnnRanked2.convMnistLossFusedR
                   miniBatchSize (tprimalPart astGlyph, tprimalPart astLabel)
                                 (parseDomains valsInit doms)
           runBatch :: (DomainsOD, StateAdam) -> (Int, [MnistDataR r])
                    -> IO (DomainsOD, StateAdam)
           runBatch !(!parameters, !stateAdam) (k, chunk) = do
             let f :: MnistDataBatchR r -> Domains (ADValClown OD.Array)
                   -> ADVal ranked r 0
                 f (glyph, label) varInputs =
                   let env1 = foldr extendEnvDR EM.empty
                              $ zip vars1 $ V.toList varInputs
                       envMnist = extendEnvR varGlyph (tconst glyph)
                                  $ extendEnvR varLabel (tconst label) env1
                   in interpretAst envMnist ast
                 chunkR = map packBatchR
                          $ filter (\ch -> length ch == miniBatchSize)
                          $ chunksOf miniBatchSize chunk
                 res@(parameters2, _) = sgdAdam f chunkR parameters stateAdam
                 !trainScore =
                   ftest (length chunk) (packBatchR chunk) parameters2
                 !testScore =
                   ftest (totalBatchSize * maxBatches) testDataR parameters2
                 !lenChunk = length chunk
             unless (n_hidden < 10) $ do
               hPutStrLn stderr $ printf "\n%s: (Batch %d with %d points)" prefix k lenChunk
               hPutStrLn stderr $ printf "%s: Training error:   %.2f%%" prefix ((1 - trainScore) * 100)
               hPutStrLn stderr $ printf "%s: Validation error: %.2f%%" prefix ((1 - testScore ) * 100)
             return res
       let runEpoch :: Int -> (DomainsOD, StateAdam) -> IO DomainsOD
           runEpoch n (params2, _) | n > epochs = return params2
           runEpoch n !paramsStateAdam@(!_, !_) = do
             unless (n_hidden < 10) $
               hPutStrLn stderr $ printf "\n%s: [Epoch %d]" prefix n
             let trainDataShuffled = shuffle (mkStdGen $ n + 5) trainData
                 chunks = take maxBatches
                          $ zip [1 ..]
                          $ chunksOf totalBatchSize trainDataShuffled
             res <- foldM runBatch paramsStateAdam chunks
             runEpoch (succ n) res
       res <- runEpoch 1 (domainsInit, initialStateAdam domainsInit)
       let testErrorFinal =
             1 - ftest (totalBatchSize * maxBatches) testDataR res
       testErrorFinal @?~ expected

{-# SPECIALIZE mnistTestCaseCNNI
  :: String
  -> Int -> Int -> Int -> Int -> Int -> Int -> Int -> Int -> Double
  -> TestTree #-}

tensorADValMnistTestsCNNI :: TestTree
tensorADValMnistTestsCNNI = testGroup "CNN Intermediate MNIST tests"
  [ mnistTestCaseCNNI "CNNI 1 epoch, 1 batch" 1 1 2 2 4 4 1 1
                       (1 :: Double)
  , mnistTestCaseCNNI "CNNI artificial 1 2 3 4 5" 1 1 2 3 4 5 1 1
                       (1 :: Float)
  , mnistTestCaseCNNI "CNNI artificial 5 4 3 2 1" 1 4 3 2 1 1 1 1
                       (1 :: Double)
  , mnistTestCaseCNNI "CNNI 1 epoch, 0 batch" 1 0 4 4 64 16 5 50
                       (1.0 :: Float)
  ]

-- JAX differentiation, Ast term built and differentiated only once
mnistTestCaseCNNO
  :: forall ranked r.
     ( ranked ~ Flip OR.Array, ADReady ranked r, Random r
     , PrintfArg r, AssertEqualUpToEpsilon r )
  => String
  -> Int -> Int -> Int -> Int -> Int -> Int -> Int -> Int -> r
  -> TestTree
mnistTestCaseCNNO prefix epochs maxBatches kh kw c_out n_hidden
                  miniBatchSize totalBatchSize expected =
 -- TODO: use withKnownNat when we no longer support GHC 9.4
 case ( someNatVal $ toInteger kh
      , someNatVal $ toInteger kw
      , someNatVal $ toInteger c_out
      , someNatVal $ toInteger n_hidden ) of
   ( Just (SomeNat @kh _), Just (SomeNat @kw _)
    ,Just (SomeNat @c_out _), Just (SomeNat @n_hidden _) ) ->
    let valsInitShaped
          :: MnistCnnRanked2.ADCnnMnistParametersShaped
               (Flip OS.Array) SizeMnistHeight SizeMnistWidth
               kh kw c_out n_hidden r
        valsInitShaped = fst $ randomVals 0.4 (mkStdGen 44)
        domainsInit = toDomains valsInitShaped  -- == toDomains valsInit
        valsInit :: MnistCnnRanked2.ADCnnMnistParameters ranked r
        valsInit = shapedToRanked valsInitShaped
        name = prefix ++ ": "
               ++ unwords [ show epochs, show maxBatches
                          , show kh, show kw, show c_out, show n_hidden
                          , show miniBatchSize
                          , show (V.length domainsInit)
                          , show (sizeDomainsOD domainsInit) ]
        ftest :: Int -> MnistDataBatchR r -> DomainsOD -> r
        ftest miniBatchSize' mnist testParams =
          MnistCnnRanked2.convMnistTestR miniBatchSize' mnist
            (\f -> runFlip $ f $ parseDomains valsInit testParams)
    in testCase name $ do
       hPutStrLn stderr $
         printf "\n%s: Epochs to run/max batches per epoch: %d/%d"
                prefix epochs maxBatches
       trainData <- map rankBatch
                    <$> loadMnistData trainGlyphsPath trainLabelsPath
       testData <- map rankBatch . take (totalBatchSize * maxBatches)
                   <$> loadMnistData testGlyphsPath testLabelsPath
       let testDataR = packBatchR testData
       (varGlyph, varGlyphD, astGlyph) <-
         funToAstIOR
           (miniBatchSize :$ sizeMnistHeightInt :$ sizeMnistWidthInt :$ ZS)
           id
       (varLabel, varLabelD, astLabel) <-
         funToAstIOR (miniBatchSize :$ sizeMnistLabelInt :$ ZS) id
       let envInit = extendEnvR varGlyph (tconstant $ astPrimalPart astGlyph)
                     $ extendEnvR varLabel (tconstant $ astPrimalPart astLabel)
                       EM.empty
           f = MnistCnnRanked2.convMnistLossFusedR
                 miniBatchSize (astPrimalPart astGlyph, astPrimalPart astLabel)
           (((varDtAgain, vars1Again), gradientRaw, primal), _) =
             revDtInit @Nat @(Flip OR.Array)
                       False f valsInit envInit domainsInit
           gradient = simplifyAstDomains6 gradientRaw
           vars1AndInputAgain = vars1Again ++ [varGlyphD, varLabelD]
           vars = (varDtAgain, vars1AndInputAgain)
           go :: [MnistDataBatchR r] -> (DomainsOD, StateAdam)
              -> (DomainsOD, StateAdam)
           go [] (parameters, stateAdam) = (parameters, stateAdam)
           go ((glyph, label) : rest) !(!parameters, !stateAdam) =
             let glyphD = DynamicExists $ dfromR @(Flip OR.Array) $ tconst glyph
                 labelD = DynamicExists $ dfromR @(Flip OR.Array) $ tconst label
                 parametersAndInput =
                   V.concat [parameters, V.fromList [glyphD, labelD]]
                 gradientDomain =
                   fst $ revAstOnDomainsEval (vars, gradient, primal)
                                             parametersAndInput Nothing
             in go rest (updateWithGradientAdam defaultArgsAdam stateAdam
                                                parameters gradientDomain)
           runBatch :: (DomainsOD, StateAdam) -> (Int, [MnistDataR r])
                    -> IO (DomainsOD, StateAdam)
           runBatch !(!parameters, !stateAdam) (k, chunk) = do
             let chunkR = map packBatchR
                          $ filter (\ch -> length ch == miniBatchSize)
                          $ chunksOf miniBatchSize chunk
                 res@(parameters2, _) = go chunkR (parameters, stateAdam)
                 !trainScore =
                   ftest (length chunk) (packBatchR chunk) parameters2
                 !testScore =
                   ftest (totalBatchSize * maxBatches) testDataR parameters2
                 !lenChunk = length chunk
             unless (n_hidden < 10) $ do
               hPutStrLn stderr $ printf "\n%s: (Batch %d with %d points)" prefix k lenChunk
               hPutStrLn stderr $ printf "%s: Training error:   %.2f%%" prefix ((1 - trainScore) * 100)
               hPutStrLn stderr $ printf "%s: Validation error: %.2f%%" prefix ((1 - testScore ) * 100)
             return res
       let runEpoch :: Int -> (DomainsOD, StateAdam) -> IO DomainsOD
           runEpoch n (params2, _) | n > epochs = return params2
           runEpoch n !paramsStateAdam@(!_, !_) = do
             unless (n_hidden < 10) $
               hPutStrLn stderr $ printf "\n%s: [Epoch %d]" prefix n
             let trainDataShuffled = shuffle (mkStdGen $ n + 5) trainData
                 chunks = take maxBatches
                          $ zip [1 ..]
                          $ chunksOf totalBatchSize trainDataShuffled
             res <- foldM runBatch paramsStateAdam chunks
             runEpoch (succ n) res
       res <- runEpoch 1 (domainsInit, initialStateAdam domainsInit)
       let testErrorFinal =
             1 - ftest (totalBatchSize * maxBatches) testDataR res
       assertEqualUpToEpsilon 1e-1 expected testErrorFinal
   _ -> error "impossible someNatVal error"

{-# SPECIALIZE mnistTestCaseCNNO
  :: String
  -> Int -> Int -> Int -> Int -> Int -> Int -> Int -> Int -> Double
  -> TestTree #-}

tensorADValMnistTestsCNNO :: TestTree
tensorADValMnistTestsCNNO = testGroup "CNN Once MNIST tests"
  [ mnistTestCaseCNNO "CNNO 1 epoch, 1 batch" 1 1 2 2 4 4 1 1
                       (1 :: Double)
  , mnistTestCaseCNNO "CNNO artificial 1 2 3 4 5" 1 1 2 3 4 5 1 1
                       (1 :: Float)
  , mnistTestCaseCNNO "CNNO artificial 5 4 3 2 1" 1 4 3 2 1 1 1 1
                       (1 :: Double)
  , mnistTestCaseCNNO "CNNO 1 epoch, 0 batch" 1 0 4 4 64 16 5 50
                       (1.0 :: Float)
  ]

tensorMnistTestsPP :: TestTree
tensorMnistTestsPP = testGroup "PP tests for CNN MNIST tests"
  [ testCase "CNNOPP" testCNNOPP
  ]

testCNNOPP :: Assertion
testCNNOPP = do
  resetVarCounter
  let renames = IM.empty
      batch_size = 1
      sizeMnistWidthI = 4  -- 4; to make weightsDense empty and so speedup
      sizeMnistHeightI = 4  -- 4; to make weightsDense empty and so speedup
      blackGlyph :: AstPrimalPart Double 4
      blackGlyph = astPrimalPart
                   $ AstReplicate batch_size
                   $ AstReplicate 1
                   $ AstReplicate sizeMnistWidthI
                   $ AstReplicate sizeMnistHeightI 7
      valsInit :: MnistCnnRanked2.ADCnnMnistParameters (Flip OR.Array) Double
      valsInit =
        shapedToRanked $ fst
        $ randomVals @(MnistCnnRanked2.ADCnnMnistParametersShaped
                         (Flip OS.Array) 4 4  -- see sizeMnistWidthI, etc.
                         1 1 1 1 Double)
                     0.4 (mkStdGen 44)
      afcnn2T :: MnistCnnRanked2.ADCnnMnistParameters AstRanked Double
              -> AstRanked Double 2
      afcnn2T = MnistCnnRanked2.convMnistTwoR sizeMnistHeightI sizeMnistWidthI
                                              batch_size blackGlyph
      (artifact6, _) = revDtFun True afcnn2T valsInit
  printGradient6Pretty renames artifact6
    @?= "\\dret u2 v3 u4 v5 m6 v7 m8 v9 -> let w315 = ttranspose [1,0] (treplicate 1 (tgather [1,4,4,1,1,2,2] (tfromList [tgather [1,4,4,1,1,2,2] (tgather [4,4,1,1,2,2] (tgather [4,1,1,2,2] (tgather [1,1,2,2] (tgather [1,2,2] (tgather [2,2] (treplicate 2 (tconst 7.0)) (\\[i244, i245] -> [i245])) (\\[i246, i247, i248] -> [i247, i248])) (\\[i249, i250, i251, i252] -> [i250, i251, i252])) (\\[i253, i254, i255, i256, i257] -> [i254, i255, i256, i257])) (\\[i258, i259, i260, i261, i262, i263] -> [i259, i260, i261, i262, i263])) (\\[i264, i265, i266, i267, i268, i269, i270] -> [i265, i266, i267, i268, i269, i270]), tgather [1,4,4,1,1,2,2] (tgather [4,4,1,1,2,2] (tgather [4,1,1,2,2] (tgather [1,1,2,2] (tgather [1,2,2] (tgather [2,2] (treplicate 2 (tconst 0.0)) (\\[i271, i272] -> [i272])) (\\[i273, i274, i275] -> [i274, i275])) (\\[i276, i277, i278, i279] -> [i277, i278, i279])) (\\[i280, i281, i282, i283, i284] -> [i281, i282, i283, i284])) (\\[i285, i286, i287, i288, i289, i290] -> [i286, i287, i288, i289, i290])) (\\[i291, i292, i293, i294, i295, i296, i297] -> [i292, i293, i294, i295, i296, i297])]) (\\[i298, i299, i300, i301, i302, i303, i304] -> [ifB ((0 <=* i298 + i301 &&* 1 >* i298 + i301) &&* ((0 <=* 0 + i302 &&* 1 >* 0 + i302) &&* ((0 <=* i299 + i303 &&* 4 >* i299 + i303) &&* (0 <=* i300 + i304 &&* 4 >* i300 + i304)))) 0 1, i298, i299, i300, i301, i302, i303, i304]))) ; w316 = ttranspose [0,3,1,2] (treplicate 1 (treplicate 4 (treplicate 4 (tgather [1,1,1,2,2] (tfromList [tgather [1,1,1,2,2] u2 (\\[i305, i306, i307, i308, i309] -> [i305 + i306, 0 + i307, 0 + i308, 0 + i309]), treplicate 1 (treplicate 1 (treplicate 1 (treplicate 2 (treplicate 2 (tconst 0.0)))))]) (\\[i310, i311, i312, i313, i314] -> [ifB ((0 <=* i310 + i311 &&* 1 >* i310 + i311) &&* ((0 <=* 0 + i312 &&* 1 >* 0 + i312) &&* ((0 <=* 0 + i313 &&* 2 >* 0 + i313) &&* (0 <=* 0 + i314 &&* 2 >* 0 + i314)))) 0 1, i310, i311, i312, i313, i314]))))) ; w317 = treplicate 1 (treplicate 1 (treplicate 2 (treplicate 2 (treplicate 1 (treplicate 1 (treplicate 2 (tsum (ttranspose [4,0,1,2,3] (treshape [1,1,4,4,4] (w315 * w316))) + ttranspose [0,3,1,2] (treplicate 1 (treplicate 4 (treplicate 4 v3)))))))))) ; w333 = tgather [1,1,2,2,1,1,2,4] (tconst (fromList [2] [0.0,1.0])) (\\[i318, i319, i320, i321, i322, i323, i324, i325] -> [ifB (w317 ! [i318, i319, i320, i321, i322, i323, i324, i318 + i322, i319 + i323, 2 * i320 + i324, i325] <=* tconst 0.0) 0 1]) ; w334 = tgather [1,1,2,2,1,1,2,4] w317 (\\[i326, i327, i328, i329, i330, i331, i332] -> [i326, i327, i328, i329, i330, i331, i332, i326 + i330, i327 + i331, 2 * i328 + i332]) ; w351 = treplicate 1 (treplicate 2 (treplicate 2 (treplicate 1 (treplicate 1 (treplicate 2 (tgather [1,1,2,2,1,1,2,2] (tfromList [tgather [1,1,2,2,1,1,2,2] (w333 * w334) (\\[i335, i336, i337, i338, i339, i340, i341, i342] -> [i335, i336, i337, i338, i339, i340, i341, 2 * i338 + i342]), treplicate 1 (treplicate 1 (treplicate 2 (treplicate 2 (treplicate 1 (treplicate 1 (treplicate 2 (treplicate 2 (tconst 0.0))))))))]) (\\[i343, i344, i345, i346, i347, i348, i349, i350] -> [ifB ((0 <=* i343 + i347 &&* 1 >* i343 + i347) &&* ((0 <=* i344 + i348 &&* 1 >* i344 + i348) &&* ((0 <=* 2 * i345 + i349 &&* 4 >* 2 * i345 + i349) &&* (0 <=* 2 * i346 + i350 &&* 4 >* 2 * i346 + i350)))) 0 1, i343, i344, i345, i346, i347, i348, i349, i350]))))))) ; w377 = ttranspose [1,0] (treplicate 1 (tgather [1,2,2,1,1,2,2] (tfromList [tgather [1,2,2,1,1,2,2] w351 (\\[i353, i354, i355, i356, i357, i358, i359] -> [i353, i354, i355, i356, i357, i358, i353 + i356, 0 + i357, i354 + i358, i355 + i359, rem (quot (quot (quot (tmaxIndex (let w352 = treshape [1,2,2,1,1,2,1,1,2,2,4] w351 in w352 ! [i353, i354, i355, i356, i357, i358, i353 + i356, 0 + i357, i354 + i358, i355 + i359])) 2) 2) 1) 1, rem (quot (quot (tmaxIndex (let w352 = treshape [1,2,2,1,1,2,1,1,2,2,4] w351 in w352 ! [i353, i354, i355, i356, i357, i358, i353 + i356, 0 + i357, i354 + i358, i355 + i359])) 2) 2) 1, rem (quot (tmaxIndex (let w352 = treshape [1,2,2,1,1,2,1,1,2,2,4] w351 in w352 ! [i353, i354, i355, i356, i357, i358, i353 + i356, 0 + i357, i354 + i358, i355 + i359])) 2) 2, rem (tmaxIndex (let w352 = treshape [1,2,2,1,1,2,1,1,2,2,4] w351 in w352 ! [i353, i354, i355, i356, i357, i358, i353 + i356, 0 + i357, i354 + i358, i355 + i359])) 2]), treplicate 1 (treplicate 2 (treplicate 2 (treplicate 1 (treplicate 1 (treplicate 2 (treplicate 2 (tconst 0.0)))))))]) (\\[i360, i361, i362, i363, i364, i365, i366] -> [ifB ((0 <=* i360 + i363 &&* 1 >* i360 + i363) &&* ((0 <=* 0 + i364 &&* 1 >* 0 + i364) &&* ((0 <=* i361 + i365 &&* 2 >* i361 + i365) &&* (0 <=* i362 + i366 &&* 2 >* i362 + i366)))) 0 1, i360, i361, i362, i363, i364, i365, i366]))) ; w378 = ttranspose [0,3,1,2] (treplicate 1 (treplicate 2 (treplicate 2 (tgather [1,1,1,2,2] (tfromList [tgather [1,1,1,2,2] u4 (\\[i367, i368, i369, i370, i371] -> [i367 + i368, 0 + i369, 0 + i370, 0 + i371]), treplicate 1 (treplicate 1 (treplicate 1 (treplicate 2 (treplicate 2 (tconst 0.0)))))]) (\\[i372, i373, i374, i375, i376] -> [ifB ((0 <=* i372 + i373 &&* 1 >* i372 + i373) &&* ((0 <=* 0 + i374 &&* 1 >* 0 + i374) &&* ((0 <=* 0 + i375 &&* 2 >* 0 + i375) &&* (0 <=* 0 + i376 &&* 2 >* 0 + i376)))) 0 1, i372, i373, i374, i375, i376]))))) ; w379 = treplicate 1 (treplicate 1 (treplicate 1 (treplicate 1 (treplicate 1 (treplicate 1 (treplicate 2 (tsum (ttranspose [4,0,1,2,3] (treshape [1,1,2,2,4] (w377 * w378))) + ttranspose [0,3,1,2] (treplicate 1 (treplicate 2 (treplicate 2 v5)))))))))) ; w395 = tgather [1,1,1,1,1,1,2,2] (tconst (fromList [2] [0.0,1.0])) (\\[i380, i381, i382, i383, i384, i385, i386, i387] -> [ifB (w379 ! [i380, i381, i382, i383, i384, i385, i386, i380 + i384, i381 + i385, 2 * i382 + i386, i387] <=* tconst 0.0) 0 1]) ; w396 = tgather [1,1,1,1,1,1,2,2] w379 (\\[i388, i389, i390, i391, i392, i393, i394] -> [i388, i389, i390, i391, i392, i393, i394, i388 + i392, i389 + i393, 2 * i390 + i394]) ; w413 = tgather [1,1,1,1,1,1,2,2] (tfromList [tgather [1,1,1,1,1,1,2,2] (w395 * w396) (\\[i397, i398, i399, i400, i401, i402, i403, i404] -> [i397, i398, i399, i400, i401, i402, i403, 2 * i400 + i404]), treplicate 1 (treplicate 1 (treplicate 1 (treplicate 1 (treplicate 1 (treplicate 1 (treplicate 2 (treplicate 2 (tconst 0.0))))))))]) (\\[i405, i406, i407, i408, i409, i410, i411, i412] -> [ifB ((0 <=* i405 + i409 &&* 1 >* i405 + i409) &&* ((0 <=* i406 + i410 &&* 1 >* i406 + i410) &&* ((0 <=* 2 * i407 + i411 &&* 2 >* 2 * i407 + i411) &&* (0 <=* 2 * i408 + i412 &&* 2 >* 2 * i408 + i412)))) 0 1, i405, i406, i407, i408, i409, i410, i411, i412]) ; t419 = ttranspose [1,0] (treplicate 1 (ttranspose [1,0] (treshape [1,1] (tgather [1,1,1,1] w413 (\\[i415, i416, i417, i418] -> [i415, i416, i417, i418, rem (quot (quot (quot (tmaxIndex (let w414 = treshape [1,1,1,1,4] w413 in w414 ! [i415, i416, i417, i418])) 2) 2) 1) 1, rem (quot (quot (tmaxIndex (let w414 = treshape [1,1,1,1,4] w413 in w414 ! [i415, i416, i417, i418])) 2) 2) 1, rem (quot (tmaxIndex (let w414 = treshape [1,1,1,1,4] w413 in w414 ! [i415, i416, i417, i418])) 2) 2, rem (tmaxIndex (let w414 = treshape [1,1,1,1,4] w413 in w414 ! [i415, i416, i417, i418])) 2]))))) ; m420 = tsum (ttranspose [2,1,0] (treplicate 1 m6) * t419) + ttranspose [1,0] (treplicate 1 v7) ; m423 = tgather [1,1] (tconst (fromList [2] [0.0,1.0])) (\\[i421, i422] -> [ifB (m420 ! [i421, i422] <=* tconst 0.0) 0 1]) ; t424 = ttranspose [1,0] (treplicate 10 (m423 * m420)) ; m425 = m423 * tsum (ttranspose [1,2,0] (treplicate 1 m8) * ttranspose [1,0] (treplicate 1 dret)) ; w438 = tscatter [2,1,1,1,1,1,1,2,2] (tscatter [1,1,1,1,1,1,2,2] (treshape [1,1,1,1] (tsum (ttranspose [1,0] (treplicate 1 m6) * ttranspose [1,2,0] (treplicate 1 m425)))) (\\[i426, i427, i428, i429] -> [i426, i427, i428, i429, rem (quot (quot (quot (tmaxIndex (let w414 = treshape [1,1,1,1,4] w413 in w414 ! [i426, i427, i428, i429])) 2) 2) 1) 1, rem (quot (quot (tmaxIndex (let w414 = treshape [1,1,1,1,4] w413 in w414 ! [i426, i427, i428, i429])) 2) 2) 1, rem (quot (tmaxIndex (let w414 = treshape [1,1,1,1,4] w413 in w414 ! [i426, i427, i428, i429])) 2) 2, rem (tmaxIndex (let w414 = treshape [1,1,1,1,4] w413 in w414 ! [i426, i427, i428, i429])) 2])) (\\[i430, i431, i432, i433, i434, i435, i436, i437] -> [ifB ((0 <=* i430 + i434 &&* 1 >* i430 + i434) &&* ((0 <=* i431 + i435 &&* 1 >* i431 + i435) &&* ((0 <=* 2 * i432 + i436 &&* 2 >* 2 * i432 + i436) &&* (0 <=* 2 * i433 + i437 &&* 2 >* 2 * i433 + i437)))) 0 1, i430, i431, i432, i433, i434, i435, i436, i437]) ; u454 = tsum (tsum (tsum (tsum (tsum (tsum (tsum (tscatter [1,1,1,1,1,1,2,1,1,2,2] (w395 * tscatter [1,1,1,1,1,1,2,2] (w438 ! [0]) (\\[i439, i440, i441, i442, i443, i444, i445, i446] -> [i439, i440, i441, i442, i443, i444, i445, 2 * i442 + i446])) (\\[i447, i448, i449, i450, i451, i452, i453] -> [i447, i448, i449, i450, i451, i452, i453, i447 + i451, i448 + i452, 2 * i449 + i453])))))))) ; w455 = treshape [1,1,2,2,1,1,2,2] (ttranspose [1,2,3,4,0] (treplicate 4 u454)) ; w461 = tscatter [2,1,1,1,2,2] (tsum (tsum (tsum (ttranspose [0,2,3,1] (w377 * w455))))) (\\[i456, i457, i458, i459, i460] -> [ifB ((0 <=* i456 + i457 &&* 1 >* i456 + i457) &&* ((0 <=* 0 + i458 &&* 1 >* 0 + i458) &&* ((0 <=* 0 + i459 &&* 2 >* 0 + i459) &&* (0 <=* 0 + i460 &&* 2 >* 0 + i460)))) 0 1, i456, i457, i458, i459, i460]) ; w474 = tscatter [2,1,2,2,1,1,2,2] (tsum (ttranspose [1,0] (w378 * w455))) (\\[i467, i468, i469, i470, i471, i472, i473] -> [ifB ((0 <=* i467 + i470 &&* 1 >* i467 + i470) &&* ((0 <=* 0 + i471 &&* 1 >* 0 + i471) &&* ((0 <=* i468 + i472 &&* 2 >* i468 + i472) &&* (0 <=* i469 + i473 &&* 2 >* i469 + i473)))) 0 1, i467, i468, i469, i470, i471, i472, i473]) ; w490 = tscatter [2,1,1,2,2,1,1,2,2] (tsum (tsum (tsum (tsum (tsum (tsum (tscatter [1,2,2,1,1,2,1,1,2,2,1,1,2,2] (w474 ! [0]) (\\[i475, i476, i477, i478, i479, i480, i481] -> [i475, i476, i477, i478, i479, i480, i475 + i478, 0 + i479, i476 + i480, i477 + i481, rem (quot (quot (quot (tmaxIndex (let w352 = treshape [1,2,2,1,1,2,1,1,2,2,4] w351 in w352 ! [i475, i476, i477, i478, i479, i480, i475 + i478, 0 + i479, i476 + i480, i477 + i481])) 2) 2) 1) 1, rem (quot (quot (tmaxIndex (let w352 = treshape [1,2,2,1,1,2,1,1,2,2,4] w351 in w352 ! [i475, i476, i477, i478, i479, i480, i475 + i478, 0 + i479, i476 + i480, i477 + i481])) 2) 2) 1, rem (quot (tmaxIndex (let w352 = treshape [1,2,2,1,1,2,1,1,2,2,4] w351 in w352 ! [i475, i476, i477, i478, i479, i480, i475 + i478, 0 + i479, i476 + i480, i477 + i481])) 2) 2, rem (tmaxIndex (let w352 = treshape [1,2,2,1,1,2,1,1,2,2,4] w351 in w352 ! [i475, i476, i477, i478, i479, i480, i475 + i478, 0 + i479, i476 + i480, i477 + i481])) 2])))))))) (\\[i482, i483, i484, i485, i486, i487, i488, i489] -> [ifB ((0 <=* i482 + i486 &&* 1 >* i482 + i486) &&* ((0 <=* i483 + i487 &&* 1 >* i483 + i487) &&* ((0 <=* 2 * i484 + i488 &&* 4 >* 2 * i484 + i488) &&* (0 <=* 2 * i485 + i489 &&* 4 >* 2 * i485 + i489)))) 0 1, i482, i483, i484, i485, i486, i487, i488, i489]) ; u506 = tsum (tsum (tsum (tsum (tsum (tsum (tsum (tscatter [1,1,2,2,1,1,2,1,1,4,4] (w333 * tscatter [1,1,2,2,1,1,2,4] (w490 ! [0]) (\\[i491, i492, i493, i494, i495, i496, i497, i498] -> [i491, i492, i493, i494, i495, i496, i497, 2 * i494 + i498])) (\\[i499, i500, i501, i502, i503, i504, i505] -> [i499, i500, i501, i502, i503, i504, i505, i499 + i503, i500 + i504, 2 * i501 + i505])))))))) ; w512 = tscatter [2,1,1,1,2,2] (tsum (tsum (tsum (ttranspose [0,2,3,1] (w315 * treshape [1,1,4,4,1,1,2,2] (ttranspose [1,2,3,4,0] (treplicate 4 u506))))))) (\\[i507, i508, i509, i510, i511] -> [ifB ((0 <=* i507 + i508 &&* 1 >* i507 + i508) &&* ((0 <=* 0 + i509 &&* 1 >* 0 + i509) &&* ((0 <=* 0 + i510 &&* 2 >* 0 + i510) &&* (0 <=* 0 + i511 &&* 2 >* 0 + i511)))) 0 1, i507, i508, i509, i510, i511]) in (tscatter [1,1,2,2] (w512 ! [0]) (\\[i513, i514, i515, i516, i517] -> [i513 + i514, 0 + i515, 0 + i516, 0 + i517]), tsum (tsum (tsum (ttranspose [0,2,3,1] u506))), tscatter [1,1,2,2] (w461 ! [0]) (\\[i462, i463, i464, i465, i466] -> [i462 + i463, 0 + i464, 0 + i465, 0 + i466]), tsum (tsum (tsum (ttranspose [0,2,3,1] u454))), tsum (ttranspose [2,1,0] (t419 * treplicate 1 m425)), tsum (ttranspose [1,0] m425), tsum (ttranspose [2,1,0] (t424 * treplicate 1 dret)), tsum (ttranspose [1,0] dret))"
  printPrimal6Pretty renames artifact6
    @?= "\\u2 v3 u4 v5 m6 v7 m8 v9 -> let w315 = ttranspose [1,0] (treplicate 1 (tgather [1,4,4,1,1,2,2] (tfromList [tgather [1,4,4,1,1,2,2] (tgather [4,4,1,1,2,2] (tgather [4,1,1,2,2] (tgather [1,1,2,2] (tgather [1,2,2] (tgather [2,2] (treplicate 2 (tconst 7.0)) (\\[i244, i245] -> [i245])) (\\[i246, i247, i248] -> [i247, i248])) (\\[i249, i250, i251, i252] -> [i250, i251, i252])) (\\[i253, i254, i255, i256, i257] -> [i254, i255, i256, i257])) (\\[i258, i259, i260, i261, i262, i263] -> [i259, i260, i261, i262, i263])) (\\[i264, i265, i266, i267, i268, i269, i270] -> [i265, i266, i267, i268, i269, i270]), tgather [1,4,4,1,1,2,2] (tgather [4,4,1,1,2,2] (tgather [4,1,1,2,2] (tgather [1,1,2,2] (tgather [1,2,2] (tgather [2,2] (treplicate 2 (tconst 0.0)) (\\[i271, i272] -> [i272])) (\\[i273, i274, i275] -> [i274, i275])) (\\[i276, i277, i278, i279] -> [i277, i278, i279])) (\\[i280, i281, i282, i283, i284] -> [i281, i282, i283, i284])) (\\[i285, i286, i287, i288, i289, i290] -> [i286, i287, i288, i289, i290])) (\\[i291, i292, i293, i294, i295, i296, i297] -> [i292, i293, i294, i295, i296, i297])]) (\\[i298, i299, i300, i301, i302, i303, i304] -> [ifB ((0 <=* i298 + i301 &&* 1 >* i298 + i301) &&* ((0 <=* 0 + i302 &&* 1 >* 0 + i302) &&* ((0 <=* i299 + i303 &&* 4 >* i299 + i303) &&* (0 <=* i300 + i304 &&* 4 >* i300 + i304)))) 0 1, i298, i299, i300, i301, i302, i303, i304]))) ; w316 = ttranspose [0,3,1,2] (treplicate 1 (treplicate 4 (treplicate 4 (tgather [1,1,1,2,2] (tfromList [tgather [1,1,1,2,2] u2 (\\[i305, i306, i307, i308, i309] -> [i305 + i306, 0 + i307, 0 + i308, 0 + i309]), treplicate 1 (treplicate 1 (treplicate 1 (treplicate 2 (treplicate 2 (tconst 0.0)))))]) (\\[i310, i311, i312, i313, i314] -> [ifB ((0 <=* i310 + i311 &&* 1 >* i310 + i311) &&* ((0 <=* 0 + i312 &&* 1 >* 0 + i312) &&* ((0 <=* 0 + i313 &&* 2 >* 0 + i313) &&* (0 <=* 0 + i314 &&* 2 >* 0 + i314)))) 0 1, i310, i311, i312, i313, i314]))))) ; w317 = treplicate 1 (treplicate 1 (treplicate 2 (treplicate 2 (treplicate 1 (treplicate 1 (treplicate 2 (tsum (ttranspose [4,0,1,2,3] (treshape [1,1,4,4,4] (w315 * w316))) + ttranspose [0,3,1,2] (treplicate 1 (treplicate 4 (treplicate 4 v3)))))))))) ; w333 = tgather [1,1,2,2,1,1,2,4] (tconst (fromList [2] [0.0,1.0])) (\\[i318, i319, i320, i321, i322, i323, i324, i325] -> [ifB (w317 ! [i318, i319, i320, i321, i322, i323, i324, i318 + i322, i319 + i323, 2 * i320 + i324, i325] <=* tconst 0.0) 0 1]) ; w334 = tgather [1,1,2,2,1,1,2,4] w317 (\\[i326, i327, i328, i329, i330, i331, i332] -> [i326, i327, i328, i329, i330, i331, i332, i326 + i330, i327 + i331, 2 * i328 + i332]) ; w351 = treplicate 1 (treplicate 2 (treplicate 2 (treplicate 1 (treplicate 1 (treplicate 2 (tgather [1,1,2,2,1,1,2,2] (tfromList [tgather [1,1,2,2,1,1,2,2] (w333 * w334) (\\[i335, i336, i337, i338, i339, i340, i341, i342] -> [i335, i336, i337, i338, i339, i340, i341, 2 * i338 + i342]), treplicate 1 (treplicate 1 (treplicate 2 (treplicate 2 (treplicate 1 (treplicate 1 (treplicate 2 (treplicate 2 (tconst 0.0))))))))]) (\\[i343, i344, i345, i346, i347, i348, i349, i350] -> [ifB ((0 <=* i343 + i347 &&* 1 >* i343 + i347) &&* ((0 <=* i344 + i348 &&* 1 >* i344 + i348) &&* ((0 <=* 2 * i345 + i349 &&* 4 >* 2 * i345 + i349) &&* (0 <=* 2 * i346 + i350 &&* 4 >* 2 * i346 + i350)))) 0 1, i343, i344, i345, i346, i347, i348, i349, i350]))))))) ; w377 = ttranspose [1,0] (treplicate 1 (tgather [1,2,2,1,1,2,2] (tfromList [tgather [1,2,2,1,1,2,2] w351 (\\[i353, i354, i355, i356, i357, i358, i359] -> [i353, i354, i355, i356, i357, i358, i353 + i356, 0 + i357, i354 + i358, i355 + i359, rem (quot (quot (quot (tmaxIndex (let w352 = treshape [1,2,2,1,1,2,1,1,2,2,4] w351 in w352 ! [i353, i354, i355, i356, i357, i358, i353 + i356, 0 + i357, i354 + i358, i355 + i359])) 2) 2) 1) 1, rem (quot (quot (tmaxIndex (let w352 = treshape [1,2,2,1,1,2,1,1,2,2,4] w351 in w352 ! [i353, i354, i355, i356, i357, i358, i353 + i356, 0 + i357, i354 + i358, i355 + i359])) 2) 2) 1, rem (quot (tmaxIndex (let w352 = treshape [1,2,2,1,1,2,1,1,2,2,4] w351 in w352 ! [i353, i354, i355, i356, i357, i358, i353 + i356, 0 + i357, i354 + i358, i355 + i359])) 2) 2, rem (tmaxIndex (let w352 = treshape [1,2,2,1,1,2,1,1,2,2,4] w351 in w352 ! [i353, i354, i355, i356, i357, i358, i353 + i356, 0 + i357, i354 + i358, i355 + i359])) 2]), treplicate 1 (treplicate 2 (treplicate 2 (treplicate 1 (treplicate 1 (treplicate 2 (treplicate 2 (tconst 0.0)))))))]) (\\[i360, i361, i362, i363, i364, i365, i366] -> [ifB ((0 <=* i360 + i363 &&* 1 >* i360 + i363) &&* ((0 <=* 0 + i364 &&* 1 >* 0 + i364) &&* ((0 <=* i361 + i365 &&* 2 >* i361 + i365) &&* (0 <=* i362 + i366 &&* 2 >* i362 + i366)))) 0 1, i360, i361, i362, i363, i364, i365, i366]))) ; w378 = ttranspose [0,3,1,2] (treplicate 1 (treplicate 2 (treplicate 2 (tgather [1,1,1,2,2] (tfromList [tgather [1,1,1,2,2] u4 (\\[i367, i368, i369, i370, i371] -> [i367 + i368, 0 + i369, 0 + i370, 0 + i371]), treplicate 1 (treplicate 1 (treplicate 1 (treplicate 2 (treplicate 2 (tconst 0.0)))))]) (\\[i372, i373, i374, i375, i376] -> [ifB ((0 <=* i372 + i373 &&* 1 >* i372 + i373) &&* ((0 <=* 0 + i374 &&* 1 >* 0 + i374) &&* ((0 <=* 0 + i375 &&* 2 >* 0 + i375) &&* (0 <=* 0 + i376 &&* 2 >* 0 + i376)))) 0 1, i372, i373, i374, i375, i376]))))) ; w379 = treplicate 1 (treplicate 1 (treplicate 1 (treplicate 1 (treplicate 1 (treplicate 1 (treplicate 2 (tsum (ttranspose [4,0,1,2,3] (treshape [1,1,2,2,4] (w377 * w378))) + ttranspose [0,3,1,2] (treplicate 1 (treplicate 2 (treplicate 2 v5)))))))))) ; w395 = tgather [1,1,1,1,1,1,2,2] (tconst (fromList [2] [0.0,1.0])) (\\[i380, i381, i382, i383, i384, i385, i386, i387] -> [ifB (w379 ! [i380, i381, i382, i383, i384, i385, i386, i380 + i384, i381 + i385, 2 * i382 + i386, i387] <=* tconst 0.0) 0 1]) ; w396 = tgather [1,1,1,1,1,1,2,2] w379 (\\[i388, i389, i390, i391, i392, i393, i394] -> [i388, i389, i390, i391, i392, i393, i394, i388 + i392, i389 + i393, 2 * i390 + i394]) ; w413 = tgather [1,1,1,1,1,1,2,2] (tfromList [tgather [1,1,1,1,1,1,2,2] (w395 * w396) (\\[i397, i398, i399, i400, i401, i402, i403, i404] -> [i397, i398, i399, i400, i401, i402, i403, 2 * i400 + i404]), treplicate 1 (treplicate 1 (treplicate 1 (treplicate 1 (treplicate 1 (treplicate 1 (treplicate 2 (treplicate 2 (tconst 0.0))))))))]) (\\[i405, i406, i407, i408, i409, i410, i411, i412] -> [ifB ((0 <=* i405 + i409 &&* 1 >* i405 + i409) &&* ((0 <=* i406 + i410 &&* 1 >* i406 + i410) &&* ((0 <=* 2 * i407 + i411 &&* 2 >* 2 * i407 + i411) &&* (0 <=* 2 * i408 + i412 &&* 2 >* 2 * i408 + i412)))) 0 1, i405, i406, i407, i408, i409, i410, i411, i412]) ; t419 = ttranspose [1,0] (treplicate 1 (ttranspose [1,0] (treshape [1,1] (tgather [1,1,1,1] w413 (\\[i415, i416, i417, i418] -> [i415, i416, i417, i418, rem (quot (quot (quot (tmaxIndex (let w414 = treshape [1,1,1,1,4] w413 in w414 ! [i415, i416, i417, i418])) 2) 2) 1) 1, rem (quot (quot (tmaxIndex (let w414 = treshape [1,1,1,1,4] w413 in w414 ! [i415, i416, i417, i418])) 2) 2) 1, rem (quot (tmaxIndex (let w414 = treshape [1,1,1,1,4] w413 in w414 ! [i415, i416, i417, i418])) 2) 2, rem (tmaxIndex (let w414 = treshape [1,1,1,1,4] w413 in w414 ! [i415, i416, i417, i418])) 2]))))) ; m420 = tsum (ttranspose [2,1,0] (treplicate 1 m6) * t419) + ttranspose [1,0] (treplicate 1 v7) ; m423 = tgather [1,1] (tconst (fromList [2] [0.0,1.0])) (\\[i421, i422] -> [ifB (m420 ! [i421, i422] <=* tconst 0.0) 0 1]) ; t424 = ttranspose [1,0] (treplicate 10 (m423 * m420)) in tsum (ttranspose [2,1,0] (treplicate 1 m8) * t424) + ttranspose [1,0] (treplicate 1 v9)"
  printGradient6Pretty renames (simplifyArtifact6 artifact6)
    @?= "\\dret u2 v3 u4 v5 m6 v7 m8 v9 -> let w315 = ttranspose [1,0] (treplicate 1 (tgather [1,4,4,1,1,2,2] (tfromList [treplicate 1 (treplicate 4 (treplicate 4 (treplicate 1 (treplicate 1 (treplicate 2 (treplicate 2 (tconst 7.0))))))), treplicate 1 (treplicate 4 (treplicate 4 (treplicate 1 (treplicate 1 (treplicate 2 (treplicate 2 (tconst 0.0)))))))]) (\\[i298, i299, i300, i301, i302, i303, i304] -> [ifB ((0 <=* i298 + i301 &&* 1 >* i298 + i301) &&* ((0 <=* 0 + i302 &&* 1 >* 0 + i302) &&* ((0 <=* i299 + i303 &&* 4 >* i299 + i303) &&* (0 <=* i300 + i304 &&* 4 >* i300 + i304)))) 0 1, i298, i299, i300, i301, i302, i303, i304]))) ; w317 = treplicate 1 (treplicate 1 (treplicate 2 (treplicate 2 (treplicate 1 (treplicate 1 (treplicate 2 (tsum (tgather [4,1,1,4,4] (w315 * ttranspose [0,3,1,2] (treplicate 1 (treplicate 4 (treplicate 4 (tgather [1,1,1,2,2] (tfromList [tgather [1,1,1,2,2] u2 (\\[i305, i306, i307, i308, i309] -> [i305 + i306, 0 + i307, 0 + i308, 0 + i309]), treplicate 1 (treplicate 1 (treplicate 1 (treplicate 2 (treplicate 2 (tconst 0.0)))))]) (\\[i310, i311, i312, i313, i314] -> [ifB ((0 <=* i310 + i311 &&* 1 >* i310 + i311) &&* ((0 <=* 0 + i312 &&* 1 >* 0 + i312) &&* ((0 <=* 0 + i313 &&* 2 >* 0 + i313) &&* (0 <=* 0 + i314 &&* 2 >* 0 + i314)))) 0 1, i310, i311, i312, i313, i314])))))) (\\[i558, i559, i560, i561, i562] -> [rem (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (4 * (4 * (1 * (1 * 0 + i559) + i560) + i561) + i562) + i558)) 2) 2) 1) 1) 4) 4) 1) 1, rem (quot (quot (quot (quot (quot (quot (1 * (4 * (4 * (4 * (1 * (1 * 0 + i559) + i560) + i561) + i562) + i558)) 2) 2) 1) 1) 4) 4) 1, rem (quot (quot (quot (quot (quot (1 * (4 * (4 * (4 * (1 * (1 * 0 + i559) + i560) + i561) + i562) + i558)) 2) 2) 1) 1) 4) 4, rem (quot (quot (quot (quot (1 * (4 * (4 * (4 * (1 * (1 * 0 + i559) + i560) + i561) + i562) + i558)) 2) 2) 1) 1) 4, rem (quot (quot (quot (1 * (4 * (4 * (4 * (1 * (1 * 0 + i559) + i560) + i561) + i562) + i558)) 2) 2) 1) 1, rem (quot (quot (1 * (4 * (4 * (4 * (1 * (1 * 0 + i559) + i560) + i561) + i562) + i558)) 2) 2) 1, rem (quot (1 * (4 * (4 * (4 * (1 * (1 * 0 + i559) + i560) + i561) + i562) + i558)) 2) 2, rem (1 * (4 * (4 * (4 * (1 * (1 * 0 + i559) + i560) + i561) + i562) + i558)) 2])) + ttranspose [0,3,1,2] (treplicate 1 (treplicate 4 (treplicate 4 v3)))))))))) ; w333 = tgather [1,1,2,2,1,1,2,4] (tconst (fromList [2] [0.0,1.0])) (\\[i318, i319, i320, i321, i322, i323, i324, i325] -> [ifB (w317 ! [i318, i319, i320, i321, i322, i323, i324, i318 + i322, i319 + i323, 2 * i320 + i324, i325] <=* tconst 0.0) 0 1]) ; w351 = treplicate 1 (treplicate 2 (treplicate 2 (treplicate 1 (treplicate 1 (treplicate 2 (tgather [1,1,2,2,1,1,2,2] (tfromList [tgather [1,1,2,2,1,1,2,2] (w333 * tgather [1,1,2,2,1,1,2,4] w317 (\\[i326, i327, i328, i329, i330, i331, i332] -> [i326, i327, i328, i329, i330, i331, i332, i326 + i330, i327 + i331, 2 * i328 + i332])) (\\[i335, i336, i337, i338, i339, i340, i341, i342] -> [i335, i336, i337, i338, i339, i340, i341, 2 * i338 + i342]), treplicate 1 (treplicate 1 (treplicate 2 (treplicate 2 (treplicate 1 (treplicate 1 (treplicate 2 (treplicate 2 (tconst 0.0))))))))]) (\\[i343, i344, i345, i346, i347, i348, i349, i350] -> [ifB ((0 <=* i343 + i347 &&* 1 >* i343 + i347) &&* ((0 <=* i344 + i348 &&* 1 >* i344 + i348) &&* ((0 <=* 2 * i345 + i349 &&* 4 >* 2 * i345 + i349) &&* (0 <=* 2 * i346 + i350 &&* 4 >* 2 * i346 + i350)))) 0 1, i343, i344, i345, i346, i347, i348, i349, i350]))))))) ; w377 = ttranspose [1,0] (treplicate 1 (tgather [1,2,2,1,1,2,2] (tfromList [tgather [1,2,2,1,1,2,2] w351 (\\[i353, i354, i355, i356, i357, i358, i359] -> [i353, i354, i355, i356, i357, i358, i353 + i356, 0 + i357, i354 + i358, i355 + i359, rem (quot (quot (quot (tmaxIndex (tgather [4] w351 (\\[i578] -> [rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i578)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1) 2) 2) 1, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i578)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1) 2) 2, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i578)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1) 2, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i578)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i578)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1, rem (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i578)) 2) 2) 1) 1) 2) 2) 1) 1) 2, rem (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i578)) 2) 2) 1) 1) 2) 2) 1) 1, rem (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i578)) 2) 2) 1) 1) 2) 2) 1, rem (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i578)) 2) 2) 1) 1) 2) 2, rem (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i578)) 2) 2) 1) 1) 2, rem (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i578)) 2) 2) 1) 1, rem (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i578)) 2) 2) 1, rem (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i578)) 2) 2, rem (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i578)) 2]))) 2) 2) 1) 1, rem (quot (quot (tmaxIndex (tgather [4] w351 (\\[i589] -> [rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i589)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1) 2) 2) 1, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i589)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1) 2) 2, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i589)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1) 2, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i589)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i589)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1, rem (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i589)) 2) 2) 1) 1) 2) 2) 1) 1) 2, rem (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i589)) 2) 2) 1) 1) 2) 2) 1) 1, rem (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i589)) 2) 2) 1) 1) 2) 2) 1, rem (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i589)) 2) 2) 1) 1) 2) 2, rem (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i589)) 2) 2) 1) 1) 2, rem (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i589)) 2) 2) 1) 1, rem (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i589)) 2) 2) 1, rem (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i589)) 2) 2, rem (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i589)) 2]))) 2) 2) 1, rem (quot (tmaxIndex (tgather [4] w351 (\\[i600] -> [rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i600)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1) 2) 2) 1, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i600)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1) 2) 2, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i600)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1) 2, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i600)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i600)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1, rem (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i600)) 2) 2) 1) 1) 2) 2) 1) 1) 2, rem (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i600)) 2) 2) 1) 1) 2) 2) 1) 1, rem (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i600)) 2) 2) 1) 1) 2) 2) 1, rem (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i600)) 2) 2) 1) 1) 2) 2, rem (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i600)) 2) 2) 1) 1) 2, rem (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i600)) 2) 2) 1) 1, rem (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i600)) 2) 2) 1, rem (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i600)) 2) 2, rem (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i600)) 2]))) 2) 2, rem (tmaxIndex (tgather [4] w351 (\\[i611] -> [rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i611)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1) 2) 2) 1, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i611)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1) 2) 2, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i611)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1) 2, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i611)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i611)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1, rem (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i611)) 2) 2) 1) 1) 2) 2) 1) 1) 2, rem (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i611)) 2) 2) 1) 1) 2) 2) 1) 1, rem (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i611)) 2) 2) 1) 1) 2) 2) 1, rem (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i611)) 2) 2) 1) 1) 2) 2, rem (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i611)) 2) 2) 1) 1) 2, rem (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i611)) 2) 2) 1) 1, rem (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i611)) 2) 2) 1, rem (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i611)) 2) 2, rem (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i611)) 2]))) 2]), treplicate 1 (treplicate 2 (treplicate 2 (treplicate 1 (treplicate 1 (treplicate 2 (treplicate 2 (tconst 0.0)))))))]) (\\[i360, i361, i362, i363, i364, i365, i366] -> [ifB ((0 <=* i360 + i363 &&* 1 >* i360 + i363) &&* ((0 <=* 0 + i364 &&* 1 >* 0 + i364) &&* ((0 <=* i361 + i365 &&* 2 >* i361 + i365) &&* (0 <=* i362 + i366 &&* 2 >* i362 + i366)))) 0 1, i360, i361, i362, i363, i364, i365, i366]))) ; w378 = ttranspose [0,3,1,2] (treplicate 1 (treplicate 2 (treplicate 2 (tgather [1,1,1,2,2] (tfromList [tgather [1,1,1,2,2] u4 (\\[i367, i368, i369, i370, i371] -> [i367 + i368, 0 + i369, 0 + i370, 0 + i371]), treplicate 1 (treplicate 1 (treplicate 1 (treplicate 2 (treplicate 2 (tconst 0.0)))))]) (\\[i372, i373, i374, i375, i376] -> [ifB ((0 <=* i372 + i373 &&* 1 >* i372 + i373) &&* ((0 <=* 0 + i374 &&* 1 >* 0 + i374) &&* ((0 <=* 0 + i375 &&* 2 >* 0 + i375) &&* (0 <=* 0 + i376 &&* 2 >* 0 + i376)))) 0 1, i372, i373, i374, i375, i376]))))) ; w379 = treplicate 1 (treplicate 1 (treplicate 1 (treplicate 1 (treplicate 1 (treplicate 1 (treplicate 2 (tsum (tgather [4,1,1,2,2] (w377 * w378) (\\[i548, i549, i550, i551, i552] -> [rem (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * 0 + i549) + i550) + i551) + i552) + i548)) 2) 2) 1) 1) 2) 2) 1) 1, rem (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * 0 + i549) + i550) + i551) + i552) + i548)) 2) 2) 1) 1) 2) 2) 1, rem (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * 0 + i549) + i550) + i551) + i552) + i548)) 2) 2) 1) 1) 2) 2, rem (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * 0 + i549) + i550) + i551) + i552) + i548)) 2) 2) 1) 1) 2, rem (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * 0 + i549) + i550) + i551) + i552) + i548)) 2) 2) 1) 1, rem (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * 0 + i549) + i550) + i551) + i552) + i548)) 2) 2) 1, rem (quot (1 * (4 * (2 * (2 * (1 * (1 * 0 + i549) + i550) + i551) + i552) + i548)) 2) 2, rem (1 * (4 * (2 * (2 * (1 * (1 * 0 + i549) + i550) + i551) + i552) + i548)) 2])) + ttranspose [0,3,1,2] (treplicate 1 (treplicate 2 (treplicate 2 v5)))))))))) ; w395 = tgather [1,1,1,1,1,1,2,2] (tconst (fromList [2] [0.0,1.0])) (\\[i380, i381, i382, i383, i384, i385, i386, i387] -> [ifB (w379 ! [i380, i381, i382, i383, i384, i385, i386, i380 + i384, i381 + i385, 2 * i382 + i386, i387] <=* tconst 0.0) 0 1]) ; w413 = tgather [1,1,1,1,1,1,2,2] (tfromList [tgather [1,1,1,1,1,1,2,2] (w395 * tgather [1,1,1,1,1,1,2,2] w379 (\\[i388, i389, i390, i391, i392, i393, i394] -> [i388, i389, i390, i391, i392, i393, i394, i388 + i392, i389 + i393, 2 * i390 + i394])) (\\[i397, i398, i399, i400, i401, i402, i403, i404] -> [i397, i398, i399, i400, i401, i402, i403, 2 * i400 + i404]), treplicate 1 (treplicate 1 (treplicate 1 (treplicate 1 (treplicate 1 (treplicate 1 (treplicate 2 (treplicate 2 (tconst 0.0))))))))]) (\\[i405, i406, i407, i408, i409, i410, i411, i412] -> [ifB ((0 <=* i405 + i409 &&* 1 >* i405 + i409) &&* ((0 <=* i406 + i410 &&* 1 >* i406 + i410) &&* ((0 <=* 2 * i407 + i411 &&* 2 >* 2 * i407 + i411) &&* (0 <=* 2 * i408 + i412 &&* 2 >* 2 * i408 + i412)))) 0 1, i405, i406, i407, i408, i409, i410, i411, i412]) ; t419 = ttranspose [1,0] (treplicate 1 (tgather [1,1] w413 (\\[i547, i546] -> [rem (quot (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) 1, rem (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1, rem (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1, rem (1 * (1 * (1 * 0 + i546) + i547)) 1, rem (quot (quot (quot (tmaxIndex (tgather [4] w413 (\\[i616] -> [rem (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) + rem (1 * (1 * (1 * 0 + i546) + i547)) 1) + i616)) 2) 2) 1) 1) 1) 1) 1) 1, rem (quot (quot (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) + rem (1 * (1 * (1 * 0 + i546) + i547)) 1) + i616)) 2) 2) 1) 1) 1) 1) 1, rem (quot (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) + rem (1 * (1 * (1 * 0 + i546) + i547)) 1) + i616)) 2) 2) 1) 1) 1) 1, rem (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) + rem (1 * (1 * (1 * 0 + i546) + i547)) 1) + i616)) 2) 2) 1) 1) 1, rem (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) + rem (1 * (1 * (1 * 0 + i546) + i547)) 1) + i616)) 2) 2) 1) 1, rem (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) + rem (1 * (1 * (1 * 0 + i546) + i547)) 1) + i616)) 2) 2) 1, rem (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) + rem (1 * (1 * (1 * 0 + i546) + i547)) 1) + i616)) 2) 2, rem (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) + rem (1 * (1 * (1 * 0 + i546) + i547)) 1) + i616)) 2]))) 2) 2) 1) 1, rem (quot (quot (tmaxIndex (tgather [4] w413 (\\[i621] -> [rem (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) + rem (1 * (1 * (1 * 0 + i546) + i547)) 1) + i621)) 2) 2) 1) 1) 1) 1) 1) 1, rem (quot (quot (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) + rem (1 * (1 * (1 * 0 + i546) + i547)) 1) + i621)) 2) 2) 1) 1) 1) 1) 1, rem (quot (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) + rem (1 * (1 * (1 * 0 + i546) + i547)) 1) + i621)) 2) 2) 1) 1) 1) 1, rem (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) + rem (1 * (1 * (1 * 0 + i546) + i547)) 1) + i621)) 2) 2) 1) 1) 1, rem (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) + rem (1 * (1 * (1 * 0 + i546) + i547)) 1) + i621)) 2) 2) 1) 1, rem (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) + rem (1 * (1 * (1 * 0 + i546) + i547)) 1) + i621)) 2) 2) 1, rem (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) + rem (1 * (1 * (1 * 0 + i546) + i547)) 1) + i621)) 2) 2, rem (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) + rem (1 * (1 * (1 * 0 + i546) + i547)) 1) + i621)) 2]))) 2) 2) 1, rem (quot (tmaxIndex (tgather [4] w413 (\\[i626] -> [rem (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) + rem (1 * (1 * (1 * 0 + i546) + i547)) 1) + i626)) 2) 2) 1) 1) 1) 1) 1) 1, rem (quot (quot (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) + rem (1 * (1 * (1 * 0 + i546) + i547)) 1) + i626)) 2) 2) 1) 1) 1) 1) 1, rem (quot (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) + rem (1 * (1 * (1 * 0 + i546) + i547)) 1) + i626)) 2) 2) 1) 1) 1) 1, rem (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) + rem (1 * (1 * (1 * 0 + i546) + i547)) 1) + i626)) 2) 2) 1) 1) 1, rem (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) + rem (1 * (1 * (1 * 0 + i546) + i547)) 1) + i626)) 2) 2) 1) 1, rem (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) + rem (1 * (1 * (1 * 0 + i546) + i547)) 1) + i626)) 2) 2) 1, rem (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) + rem (1 * (1 * (1 * 0 + i546) + i547)) 1) + i626)) 2) 2, rem (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) + rem (1 * (1 * (1 * 0 + i546) + i547)) 1) + i626)) 2]))) 2) 2, rem (tmaxIndex (tgather [4] w413 (\\[i631] -> [rem (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) + rem (1 * (1 * (1 * 0 + i546) + i547)) 1) + i631)) 2) 2) 1) 1) 1) 1) 1) 1, rem (quot (quot (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) + rem (1 * (1 * (1 * 0 + i546) + i547)) 1) + i631)) 2) 2) 1) 1) 1) 1) 1, rem (quot (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) + rem (1 * (1 * (1 * 0 + i546) + i547)) 1) + i631)) 2) 2) 1) 1) 1) 1, rem (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) + rem (1 * (1 * (1 * 0 + i546) + i547)) 1) + i631)) 2) 2) 1) 1) 1, rem (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) + rem (1 * (1 * (1 * 0 + i546) + i547)) 1) + i631)) 2) 2) 1) 1, rem (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) + rem (1 * (1 * (1 * 0 + i546) + i547)) 1) + i631)) 2) 2) 1, rem (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) + rem (1 * (1 * (1 * 0 + i546) + i547)) 1) + i631)) 2) 2, rem (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i546) + i547)) 1) 1) + rem (1 * (1 * (1 * 0 + i546) + i547)) 1) + i631)) 2]))) 2]))) ; m420 = tsum (ttranspose [2,1,0] (treplicate 1 m6) * t419) + ttranspose [1,0] (treplicate 1 v7) ; m423 = tgather [1,1] (tconst (fromList [2] [0.0,1.0])) (\\[i421, i422] -> [ifB (m420 ! [i421, i422] <=* tconst 0.0) 0 1]) ; m425 = m423 * tsum (ttranspose [1,2,0] (treplicate 1 m8) * ttranspose [1,0] (treplicate 1 dret)) ; u454 = tscatter [1,1,2,2] (w395 * tscatter [1,1,1,1,1,1,2,2] (tscatter [2,1,1,1,1,1,1,2,2] (tscatter [1,1,1,1,1,1,2,2] (tsum (tgather [1,1,1,1,1] (ttranspose [1,0] (treplicate 1 m6) * ttranspose [1,2,0] (treplicate 1 m425)) (\\[i538, i539, i540, i541, i542] -> [i538, rem (quot (1 * (1 * (1 * (1 * (1 * 0 + i539) + i540) + i541) + i542)) 1) 1, rem (1 * (1 * (1 * (1 * (1 * 0 + i539) + i540) + i541) + i542)) 1]))) (\\[i426, i427, i428, i429] -> [i426, i427, i428, i429, rem (quot (quot (quot (tmaxIndex (tgather [4] w413 (\\[i636] -> [rem (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + i426) + i427) + i428) + i429) + i636)) 2) 2) 1) 1) 1) 1) 1) 1, rem (quot (quot (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + i426) + i427) + i428) + i429) + i636)) 2) 2) 1) 1) 1) 1) 1, rem (quot (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + i426) + i427) + i428) + i429) + i636)) 2) 2) 1) 1) 1) 1, rem (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + i426) + i427) + i428) + i429) + i636)) 2) 2) 1) 1) 1, rem (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + i426) + i427) + i428) + i429) + i636)) 2) 2) 1) 1, rem (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + i426) + i427) + i428) + i429) + i636)) 2) 2) 1, rem (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + i426) + i427) + i428) + i429) + i636)) 2) 2, rem (1 * (4 * (1 * (1 * (1 * (1 * 0 + i426) + i427) + i428) + i429) + i636)) 2]))) 2) 2) 1) 1, rem (quot (quot (tmaxIndex (tgather [4] w413 (\\[i641] -> [rem (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + i426) + i427) + i428) + i429) + i641)) 2) 2) 1) 1) 1) 1) 1) 1, rem (quot (quot (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + i426) + i427) + i428) + i429) + i641)) 2) 2) 1) 1) 1) 1) 1, rem (quot (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + i426) + i427) + i428) + i429) + i641)) 2) 2) 1) 1) 1) 1, rem (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + i426) + i427) + i428) + i429) + i641)) 2) 2) 1) 1) 1, rem (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + i426) + i427) + i428) + i429) + i641)) 2) 2) 1) 1, rem (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + i426) + i427) + i428) + i429) + i641)) 2) 2) 1, rem (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + i426) + i427) + i428) + i429) + i641)) 2) 2, rem (1 * (4 * (1 * (1 * (1 * (1 * 0 + i426) + i427) + i428) + i429) + i641)) 2]))) 2) 2) 1, rem (quot (tmaxIndex (tgather [4] w413 (\\[i646] -> [rem (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + i426) + i427) + i428) + i429) + i646)) 2) 2) 1) 1) 1) 1) 1) 1, rem (quot (quot (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + i426) + i427) + i428) + i429) + i646)) 2) 2) 1) 1) 1) 1) 1, rem (quot (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + i426) + i427) + i428) + i429) + i646)) 2) 2) 1) 1) 1) 1, rem (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + i426) + i427) + i428) + i429) + i646)) 2) 2) 1) 1) 1, rem (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + i426) + i427) + i428) + i429) + i646)) 2) 2) 1) 1, rem (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + i426) + i427) + i428) + i429) + i646)) 2) 2) 1, rem (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + i426) + i427) + i428) + i429) + i646)) 2) 2, rem (1 * (4 * (1 * (1 * (1 * (1 * 0 + i426) + i427) + i428) + i429) + i646)) 2]))) 2) 2, rem (tmaxIndex (tgather [4] w413 (\\[i651] -> [rem (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + i426) + i427) + i428) + i429) + i651)) 2) 2) 1) 1) 1) 1) 1) 1, rem (quot (quot (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + i426) + i427) + i428) + i429) + i651)) 2) 2) 1) 1) 1) 1) 1, rem (quot (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + i426) + i427) + i428) + i429) + i651)) 2) 2) 1) 1) 1) 1, rem (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + i426) + i427) + i428) + i429) + i651)) 2) 2) 1) 1) 1, rem (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + i426) + i427) + i428) + i429) + i651)) 2) 2) 1) 1, rem (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + i426) + i427) + i428) + i429) + i651)) 2) 2) 1, rem (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + i426) + i427) + i428) + i429) + i651)) 2) 2, rem (1 * (4 * (1 * (1 * (1 * (1 * 0 + i426) + i427) + i428) + i429) + i651)) 2]))) 2])) (\\[i430, i431, i432, i433, i434, i435, i436, i437] -> [ifB ((0 <=* i430 + i434 &&* 1 >* i430 + i434) &&* ((0 <=* i431 + i435 &&* 1 >* i431 + i435) &&* ((0 <=* 2 * i432 + i436 &&* 2 >* 2 * i432 + i436) &&* (0 <=* 2 * i433 + i437 &&* 2 >* 2 * i433 + i437)))) 0 1, i430, i431, i432, i433, i434, i435, i436, i437]) ! [0]) (\\[i439, i440, i441, i442, i443, i444, i445, i446] -> [i439, i440, i441, i442, i443, i444, i445, 2 * i442 + i446])) (\\[i447, i448, i449, i450, i451, i452, i453] -> [i447 + i451, i448 + i452, 2 * i449 + i453]) ; w455 = tgather [1,1,2,2,1,1,2,2] u454 (\\[i526, i527, i528, i529, i530, i531, i532, i533] -> [rem (quot (quot (quot (quot (1 * (2 * (2 * (1 * (1 * (2 * (2 * (1 * (1 * 0 + i526) + i527) + i528) + i529) + i530) + i531) + i532) + i533)) 4) 2) 2) 1) 1, rem (quot (quot (quot (1 * (2 * (2 * (1 * (1 * (2 * (2 * (1 * (1 * 0 + i526) + i527) + i528) + i529) + i530) + i531) + i532) + i533)) 4) 2) 2) 1, rem (quot (quot (1 * (2 * (2 * (1 * (1 * (2 * (2 * (1 * (1 * 0 + i526) + i527) + i528) + i529) + i530) + i531) + i532) + i533)) 4) 2) 2, rem (quot (1 * (2 * (2 * (1 * (1 * (2 * (2 * (1 * (1 * 0 + i526) + i527) + i528) + i529) + i530) + i531) + i532) + i533)) 4) 2]) ; u506 = tscatter [1,1,4,4] (w333 * tscatter [1,1,2,2,1,1,2,4] (tscatter [2,1,1,2,2,1,1,2,2] (tscatter [1,1,2,2,1,1,2,2] (tscatter [2,1,2,2,1,1,2,2] (tsum (ttranspose [1,0] (w378 * w455))) (\\[i467, i468, i469, i470, i471, i472, i473] -> [ifB ((0 <=* i467 + i470 &&* 1 >* i467 + i470) &&* ((0 <=* 0 + i471 &&* 1 >* 0 + i471) &&* ((0 <=* i468 + i472 &&* 2 >* i468 + i472) &&* (0 <=* i469 + i473 &&* 2 >* i469 + i473)))) 0 1, i467, i468, i469, i470, i471, i472, i473]) ! [0]) (\\[i475, i476, i477, i478, i479, i480, i481] -> [i475 + i478, 0 + i479, i476 + i480, i477 + i481, rem (quot (quot (quot (tmaxIndex (tgather [4] w351 (\\[i662] -> [rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i662)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1) 2) 2) 1, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i662)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1) 2) 2, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i662)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1) 2, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i662)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i662)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1, rem (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i662)) 2) 2) 1) 1) 2) 2) 1) 1) 2, rem (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i662)) 2) 2) 1) 1) 2) 2) 1) 1, rem (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i662)) 2) 2) 1) 1) 2) 2) 1, rem (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i662)) 2) 2) 1) 1) 2) 2, rem (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i662)) 2) 2) 1) 1) 2, rem (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i662)) 2) 2) 1) 1, rem (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i662)) 2) 2) 1, rem (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i662)) 2) 2, rem (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i662)) 2]))) 2) 2) 1) 1, rem (quot (quot (tmaxIndex (tgather [4] w351 (\\[i673] -> [rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i673)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1) 2) 2) 1, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i673)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1) 2) 2, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i673)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1) 2, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i673)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i673)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1, rem (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i673)) 2) 2) 1) 1) 2) 2) 1) 1) 2, rem (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i673)) 2) 2) 1) 1) 2) 2) 1) 1, rem (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i673)) 2) 2) 1) 1) 2) 2) 1, rem (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i673)) 2) 2) 1) 1) 2) 2, rem (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i673)) 2) 2) 1) 1) 2, rem (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i673)) 2) 2) 1) 1, rem (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i673)) 2) 2) 1, rem (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i673)) 2) 2, rem (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i673)) 2]))) 2) 2) 1, rem (quot (tmaxIndex (tgather [4] w351 (\\[i684] -> [rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i684)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1) 2) 2) 1, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i684)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1) 2) 2, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i684)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1) 2, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i684)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i684)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1, rem (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i684)) 2) 2) 1) 1) 2) 2) 1) 1) 2, rem (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i684)) 2) 2) 1) 1) 2) 2) 1) 1, rem (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i684)) 2) 2) 1) 1) 2) 2) 1, rem (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i684)) 2) 2) 1) 1) 2) 2, rem (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i684)) 2) 2) 1) 1) 2, rem (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i684)) 2) 2) 1) 1, rem (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i684)) 2) 2) 1, rem (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i684)) 2) 2, rem (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i684)) 2]))) 2) 2, rem (tmaxIndex (tgather [4] w351 (\\[i695] -> [rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i695)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1) 2) 2) 1, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i695)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1) 2) 2, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i695)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1) 2, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i695)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i695)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1, rem (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i695)) 2) 2) 1) 1) 2) 2) 1) 1) 2, rem (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i695)) 2) 2) 1) 1) 2) 2) 1) 1, rem (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i695)) 2) 2) 1) 1) 2) 2) 1, rem (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i695)) 2) 2) 1) 1) 2) 2, rem (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i695)) 2) 2) 1) 1) 2, rem (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i695)) 2) 2) 1) 1, rem (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i695)) 2) 2) 1, rem (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i695)) 2) 2, rem (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i475) + i476) + i477) + i478) + i479) + i480) + (i475 + i478)) + (0 + i479)) + (i476 + i480)) + (i477 + i481)) + i695)) 2]))) 2])) (\\[i482, i483, i484, i485, i486, i487, i488, i489] -> [ifB ((0 <=* i482 + i486 &&* 1 >* i482 + i486) &&* ((0 <=* i483 + i487 &&* 1 >* i483 + i487) &&* ((0 <=* 2 * i484 + i488 &&* 4 >* 2 * i484 + i488) &&* (0 <=* 2 * i485 + i489 &&* 4 >* 2 * i485 + i489)))) 0 1, i482, i483, i484, i485, i486, i487, i488, i489]) ! [0]) (\\[i491, i492, i493, i494, i495, i496, i497, i498] -> [i491, i492, i493, i494, i495, i496, i497, 2 * i494 + i498])) (\\[i499, i500, i501, i502, i503, i504, i505] -> [i499 + i503, i500 + i504, 2 * i501 + i505]) in (tscatter [1,1,2,2] (tscatter [2,1,1,1,2,2] (tsum (tsum (tsum (ttranspose [0,2,3,1] (w315 * tgather [1,1,4,4,1,1,2,2] u506 (\\[i518, i519, i520, i521, i522, i523, i524, i525] -> [rem (quot (quot (quot (quot (1 * (2 * (2 * (1 * (1 * (4 * (4 * (1 * (1 * 0 + i518) + i519) + i520) + i521) + i522) + i523) + i524) + i525)) 4) 4) 4) 1) 1, rem (quot (quot (quot (1 * (2 * (2 * (1 * (1 * (4 * (4 * (1 * (1 * 0 + i518) + i519) + i520) + i521) + i522) + i523) + i524) + i525)) 4) 4) 4) 1, rem (quot (quot (1 * (2 * (2 * (1 * (1 * (4 * (4 * (1 * (1 * 0 + i518) + i519) + i520) + i521) + i522) + i523) + i524) + i525)) 4) 4) 4, rem (quot (1 * (2 * (2 * (1 * (1 * (4 * (4 * (1 * (1 * 0 + i518) + i519) + i520) + i521) + i522) + i523) + i524) + i525)) 4) 4])))))) (\\[i507, i508, i509, i510, i511] -> [ifB ((0 <=* i507 + i508 &&* 1 >* i507 + i508) &&* ((0 <=* 0 + i509 &&* 1 >* 0 + i509) &&* ((0 <=* 0 + i510 &&* 2 >* 0 + i510) &&* (0 <=* 0 + i511 &&* 2 >* 0 + i511)))) 0 1, i507, i508, i509, i510, i511]) ! [0]) (\\[i513, i514, i515, i516, i517] -> [i513 + i514, 0 + i515, 0 + i516, 0 + i517]), tsum (tsum (tsum (ttranspose [0,2,3,1] u506))), tscatter [1,1,2,2] (tscatter [2,1,1,1,2,2] (tsum (tsum (tsum (ttranspose [0,2,3,1] (w377 * w455))))) (\\[i456, i457, i458, i459, i460] -> [ifB ((0 <=* i456 + i457 &&* 1 >* i456 + i457) &&* ((0 <=* 0 + i458 &&* 1 >* 0 + i458) &&* ((0 <=* 0 + i459 &&* 2 >* 0 + i459) &&* (0 <=* 0 + i460 &&* 2 >* 0 + i460)))) 0 1, i456, i457, i458, i459, i460]) ! [0]) (\\[i462, i463, i464, i465, i466] -> [i462 + i463, 0 + i464, 0 + i465, 0 + i466]), tsum (tsum (tsum (ttranspose [0,2,3,1] u454))), tsum (ttranspose [2,1,0] (t419 * treplicate 1 m425)), tsum (ttranspose [1,0] m425), tsum (ttranspose [2,0,1] (treplicate 10 (m423 * m420)) * ttranspose [2,1,0] (treplicate 1 dret)), tsum (ttranspose [1,0] dret))"
  printPrimal6Pretty renames (simplifyArtifact6 artifact6)
    @?= "\\u2 v3 u4 v5 m6 v7 m8 v9 -> let w317 = treplicate 1 (treplicate 1 (treplicate 2 (treplicate 2 (treplicate 1 (treplicate 1 (treplicate 2 (tsum (tgather [4,1,1,4,4] (ttranspose [1,0] (treplicate 1 (tgather [1,4,4,1,1,2,2] (tfromList [treplicate 1 (treplicate 4 (treplicate 4 (treplicate 1 (treplicate 1 (treplicate 2 (treplicate 2 (tconst 7.0))))))), treplicate 1 (treplicate 4 (treplicate 4 (treplicate 1 (treplicate 1 (treplicate 2 (treplicate 2 (tconst 0.0)))))))]) (\\[i298, i299, i300, i301, i302, i303, i304] -> [ifB ((0 <=* i298 + i301 &&* 1 >* i298 + i301) &&* ((0 <=* 0 + i302 &&* 1 >* 0 + i302) &&* ((0 <=* i299 + i303 &&* 4 >* i299 + i303) &&* (0 <=* i300 + i304 &&* 4 >* i300 + i304)))) 0 1, i298, i299, i300, i301, i302, i303, i304]))) * ttranspose [0,3,1,2] (treplicate 1 (treplicate 4 (treplicate 4 (tgather [1,1,1,2,2] (tfromList [tgather [1,1,1,2,2] u2 (\\[i305, i306, i307, i308, i309] -> [i305 + i306, 0 + i307, 0 + i308, 0 + i309]), treplicate 1 (treplicate 1 (treplicate 1 (treplicate 2 (treplicate 2 (tconst 0.0)))))]) (\\[i310, i311, i312, i313, i314] -> [ifB ((0 <=* i310 + i311 &&* 1 >* i310 + i311) &&* ((0 <=* 0 + i312 &&* 1 >* 0 + i312) &&* ((0 <=* 0 + i313 &&* 2 >* 0 + i313) &&* (0 <=* 0 + i314 &&* 2 >* 0 + i314)))) 0 1, i310, i311, i312, i313, i314])))))) (\\[i708, i709, i710, i711, i712] -> [rem (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (4 * (4 * (1 * (1 * 0 + i709) + i710) + i711) + i712) + i708)) 2) 2) 1) 1) 4) 4) 1) 1, rem (quot (quot (quot (quot (quot (quot (1 * (4 * (4 * (4 * (1 * (1 * 0 + i709) + i710) + i711) + i712) + i708)) 2) 2) 1) 1) 4) 4) 1, rem (quot (quot (quot (quot (quot (1 * (4 * (4 * (4 * (1 * (1 * 0 + i709) + i710) + i711) + i712) + i708)) 2) 2) 1) 1) 4) 4, rem (quot (quot (quot (quot (1 * (4 * (4 * (4 * (1 * (1 * 0 + i709) + i710) + i711) + i712) + i708)) 2) 2) 1) 1) 4, rem (quot (quot (quot (1 * (4 * (4 * (4 * (1 * (1 * 0 + i709) + i710) + i711) + i712) + i708)) 2) 2) 1) 1, rem (quot (quot (1 * (4 * (4 * (4 * (1 * (1 * 0 + i709) + i710) + i711) + i712) + i708)) 2) 2) 1, rem (quot (1 * (4 * (4 * (4 * (1 * (1 * 0 + i709) + i710) + i711) + i712) + i708)) 2) 2, rem (1 * (4 * (4 * (4 * (1 * (1 * 0 + i709) + i710) + i711) + i712) + i708)) 2])) + ttranspose [0,3,1,2] (treplicate 1 (treplicate 4 (treplicate 4 v3)))))))))) ; w351 = treplicate 1 (treplicate 2 (treplicate 2 (treplicate 1 (treplicate 1 (treplicate 2 (tgather [1,1,2,2,1,1,2,2] (tfromList [tgather [1,1,2,2,1,1,2,2] (tgather [1,1,2,2,1,1,2,4] (tconst (fromList [2] [0.0,1.0])) (\\[i318, i319, i320, i321, i322, i323, i324, i325] -> [ifB (w317 ! [i318, i319, i320, i321, i322, i323, i324, i318 + i322, i319 + i323, 2 * i320 + i324, i325] <=* tconst 0.0) 0 1]) * tgather [1,1,2,2,1,1,2,4] w317 (\\[i326, i327, i328, i329, i330, i331, i332] -> [i326, i327, i328, i329, i330, i331, i332, i326 + i330, i327 + i331, 2 * i328 + i332])) (\\[i335, i336, i337, i338, i339, i340, i341, i342] -> [i335, i336, i337, i338, i339, i340, i341, 2 * i338 + i342]), treplicate 1 (treplicate 1 (treplicate 2 (treplicate 2 (treplicate 1 (treplicate 1 (treplicate 2 (treplicate 2 (tconst 0.0))))))))]) (\\[i343, i344, i345, i346, i347, i348, i349, i350] -> [ifB ((0 <=* i343 + i347 &&* 1 >* i343 + i347) &&* ((0 <=* i344 + i348 &&* 1 >* i344 + i348) &&* ((0 <=* 2 * i345 + i349 &&* 4 >* 2 * i345 + i349) &&* (0 <=* 2 * i346 + i350 &&* 4 >* 2 * i346 + i350)))) 0 1, i343, i344, i345, i346, i347, i348, i349, i350]))))))) ; w379 = treplicate 1 (treplicate 1 (treplicate 1 (treplicate 1 (treplicate 1 (treplicate 1 (treplicate 2 (tsum (tgather [4,1,1,2,2] (ttranspose [1,0] (treplicate 1 (tgather [1,2,2,1,1,2,2] (tfromList [tgather [1,2,2,1,1,2,2] w351 (\\[i353, i354, i355, i356, i357, i358, i359] -> [i353, i354, i355, i356, i357, i358, i353 + i356, 0 + i357, i354 + i358, i355 + i359, rem (quot (quot (quot (tmaxIndex (tgather [4] w351 (\\[i728] -> [rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i728)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1) 2) 2) 1, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i728)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1) 2) 2, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i728)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1) 2, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i728)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i728)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1, rem (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i728)) 2) 2) 1) 1) 2) 2) 1) 1) 2, rem (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i728)) 2) 2) 1) 1) 2) 2) 1) 1, rem (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i728)) 2) 2) 1) 1) 2) 2) 1, rem (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i728)) 2) 2) 1) 1) 2) 2, rem (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i728)) 2) 2) 1) 1) 2, rem (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i728)) 2) 2) 1) 1, rem (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i728)) 2) 2) 1, rem (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i728)) 2) 2, rem (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i728)) 2]))) 2) 2) 1) 1, rem (quot (quot (tmaxIndex (tgather [4] w351 (\\[i739] -> [rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i739)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1) 2) 2) 1, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i739)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1) 2) 2, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i739)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1) 2, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i739)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i739)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1, rem (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i739)) 2) 2) 1) 1) 2) 2) 1) 1) 2, rem (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i739)) 2) 2) 1) 1) 2) 2) 1) 1, rem (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i739)) 2) 2) 1) 1) 2) 2) 1, rem (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i739)) 2) 2) 1) 1) 2) 2, rem (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i739)) 2) 2) 1) 1) 2, rem (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i739)) 2) 2) 1) 1, rem (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i739)) 2) 2) 1, rem (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i739)) 2) 2, rem (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i739)) 2]))) 2) 2) 1, rem (quot (tmaxIndex (tgather [4] w351 (\\[i750] -> [rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i750)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1) 2) 2) 1, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i750)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1) 2) 2, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i750)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1) 2, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i750)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i750)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1, rem (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i750)) 2) 2) 1) 1) 2) 2) 1) 1) 2, rem (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i750)) 2) 2) 1) 1) 2) 2) 1) 1, rem (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i750)) 2) 2) 1) 1) 2) 2) 1, rem (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i750)) 2) 2) 1) 1) 2) 2, rem (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i750)) 2) 2) 1) 1) 2, rem (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i750)) 2) 2) 1) 1, rem (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i750)) 2) 2) 1, rem (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i750)) 2) 2, rem (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i750)) 2]))) 2) 2, rem (tmaxIndex (tgather [4] w351 (\\[i761] -> [rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i761)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1) 2) 2) 1, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i761)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1) 2) 2, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i761)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1) 2, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i761)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1) 1, rem (quot (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i761)) 2) 2) 1) 1) 2) 2) 1) 1) 2) 1, rem (quot (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i761)) 2) 2) 1) 1) 2) 2) 1) 1) 2, rem (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i761)) 2) 2) 1) 1) 2) 2) 1) 1, rem (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i761)) 2) 2) 1) 1) 2) 2) 1, rem (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i761)) 2) 2) 1) 1) 2) 2, rem (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i761)) 2) 2) 1) 1) 2, rem (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i761)) 2) 2) 1) 1, rem (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i761)) 2) 2) 1, rem (quot (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i761)) 2) 2, rem (1 * (4 * (2 * (2 * (1 * (1 * (2 * (1 * (1 * (2 * (2 * (1 * 0 + i353) + i354) + i355) + i356) + i357) + i358) + (i353 + i356)) + (0 + i357)) + (i354 + i358)) + (i355 + i359)) + i761)) 2]))) 2]), treplicate 1 (treplicate 2 (treplicate 2 (treplicate 1 (treplicate 1 (treplicate 2 (treplicate 2 (tconst 0.0)))))))]) (\\[i360, i361, i362, i363, i364, i365, i366] -> [ifB ((0 <=* i360 + i363 &&* 1 >* i360 + i363) &&* ((0 <=* 0 + i364 &&* 1 >* 0 + i364) &&* ((0 <=* i361 + i365 &&* 2 >* i361 + i365) &&* (0 <=* i362 + i366 &&* 2 >* i362 + i366)))) 0 1, i360, i361, i362, i363, i364, i365, i366]))) * ttranspose [0,3,1,2] (treplicate 1 (treplicate 2 (treplicate 2 (tgather [1,1,1,2,2] (tfromList [tgather [1,1,1,2,2] u4 (\\[i367, i368, i369, i370, i371] -> [i367 + i368, 0 + i369, 0 + i370, 0 + i371]), treplicate 1 (treplicate 1 (treplicate 1 (treplicate 2 (treplicate 2 (tconst 0.0)))))]) (\\[i372, i373, i374, i375, i376] -> [ifB ((0 <=* i372 + i373 &&* 1 >* i372 + i373) &&* ((0 <=* 0 + i374 &&* 1 >* 0 + i374) &&* ((0 <=* 0 + i375 &&* 2 >* 0 + i375) &&* (0 <=* 0 + i376 &&* 2 >* 0 + i376)))) 0 1, i372, i373, i374, i375, i376])))))) (\\[i698, i699, i700, i701, i702] -> [rem (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * 0 + i699) + i700) + i701) + i702) + i698)) 2) 2) 1) 1) 2) 2) 1) 1, rem (quot (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * 0 + i699) + i700) + i701) + i702) + i698)) 2) 2) 1) 1) 2) 2) 1, rem (quot (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * 0 + i699) + i700) + i701) + i702) + i698)) 2) 2) 1) 1) 2) 2, rem (quot (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * 0 + i699) + i700) + i701) + i702) + i698)) 2) 2) 1) 1) 2, rem (quot (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * 0 + i699) + i700) + i701) + i702) + i698)) 2) 2) 1) 1, rem (quot (quot (1 * (4 * (2 * (2 * (1 * (1 * 0 + i699) + i700) + i701) + i702) + i698)) 2) 2) 1, rem (quot (1 * (4 * (2 * (2 * (1 * (1 * 0 + i699) + i700) + i701) + i702) + i698)) 2) 2, rem (1 * (4 * (2 * (2 * (1 * (1 * 0 + i699) + i700) + i701) + i702) + i698)) 2])) + ttranspose [0,3,1,2] (treplicate 1 (treplicate 2 (treplicate 2 v5)))))))))) ; w413 = tgather [1,1,1,1,1,1,2,2] (tfromList [tgather [1,1,1,1,1,1,2,2] (tgather [1,1,1,1,1,1,2,2] (tconst (fromList [2] [0.0,1.0])) (\\[i380, i381, i382, i383, i384, i385, i386, i387] -> [ifB (w379 ! [i380, i381, i382, i383, i384, i385, i386, i380 + i384, i381 + i385, 2 * i382 + i386, i387] <=* tconst 0.0) 0 1]) * tgather [1,1,1,1,1,1,2,2] w379 (\\[i388, i389, i390, i391, i392, i393, i394] -> [i388, i389, i390, i391, i392, i393, i394, i388 + i392, i389 + i393, 2 * i390 + i394])) (\\[i397, i398, i399, i400, i401, i402, i403, i404] -> [i397, i398, i399, i400, i401, i402, i403, 2 * i400 + i404]), treplicate 1 (treplicate 1 (treplicate 1 (treplicate 1 (treplicate 1 (treplicate 1 (treplicate 2 (treplicate 2 (tconst 0.0))))))))]) (\\[i405, i406, i407, i408, i409, i410, i411, i412] -> [ifB ((0 <=* i405 + i409 &&* 1 >* i405 + i409) &&* ((0 <=* i406 + i410 &&* 1 >* i406 + i410) &&* ((0 <=* 2 * i407 + i411 &&* 2 >* 2 * i407 + i411) &&* (0 <=* 2 * i408 + i412 &&* 2 >* 2 * i408 + i412)))) 0 1, i405, i406, i407, i408, i409, i410, i411, i412]) ; m420 = tsum (ttranspose [2,1,0] (treplicate 1 m6) * ttranspose [1,0] (treplicate 1 (tgather [1,1] w413 (\\[i697, i696] -> [rem (quot (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) 1, rem (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1, rem (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1, rem (1 * (1 * (1 * 0 + i696) + i697)) 1, rem (quot (quot (quot (tmaxIndex (tgather [4] w413 (\\[i766] -> [rem (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) + rem (1 * (1 * (1 * 0 + i696) + i697)) 1) + i766)) 2) 2) 1) 1) 1) 1) 1) 1, rem (quot (quot (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) + rem (1 * (1 * (1 * 0 + i696) + i697)) 1) + i766)) 2) 2) 1) 1) 1) 1) 1, rem (quot (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) + rem (1 * (1 * (1 * 0 + i696) + i697)) 1) + i766)) 2) 2) 1) 1) 1) 1, rem (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) + rem (1 * (1 * (1 * 0 + i696) + i697)) 1) + i766)) 2) 2) 1) 1) 1, rem (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) + rem (1 * (1 * (1 * 0 + i696) + i697)) 1) + i766)) 2) 2) 1) 1, rem (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) + rem (1 * (1 * (1 * 0 + i696) + i697)) 1) + i766)) 2) 2) 1, rem (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) + rem (1 * (1 * (1 * 0 + i696) + i697)) 1) + i766)) 2) 2, rem (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) + rem (1 * (1 * (1 * 0 + i696) + i697)) 1) + i766)) 2]))) 2) 2) 1) 1, rem (quot (quot (tmaxIndex (tgather [4] w413 (\\[i771] -> [rem (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) + rem (1 * (1 * (1 * 0 + i696) + i697)) 1) + i771)) 2) 2) 1) 1) 1) 1) 1) 1, rem (quot (quot (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) + rem (1 * (1 * (1 * 0 + i696) + i697)) 1) + i771)) 2) 2) 1) 1) 1) 1) 1, rem (quot (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) + rem (1 * (1 * (1 * 0 + i696) + i697)) 1) + i771)) 2) 2) 1) 1) 1) 1, rem (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) + rem (1 * (1 * (1 * 0 + i696) + i697)) 1) + i771)) 2) 2) 1) 1) 1, rem (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) + rem (1 * (1 * (1 * 0 + i696) + i697)) 1) + i771)) 2) 2) 1) 1, rem (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) + rem (1 * (1 * (1 * 0 + i696) + i697)) 1) + i771)) 2) 2) 1, rem (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) + rem (1 * (1 * (1 * 0 + i696) + i697)) 1) + i771)) 2) 2, rem (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) + rem (1 * (1 * (1 * 0 + i696) + i697)) 1) + i771)) 2]))) 2) 2) 1, rem (quot (tmaxIndex (tgather [4] w413 (\\[i776] -> [rem (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) + rem (1 * (1 * (1 * 0 + i696) + i697)) 1) + i776)) 2) 2) 1) 1) 1) 1) 1) 1, rem (quot (quot (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) + rem (1 * (1 * (1 * 0 + i696) + i697)) 1) + i776)) 2) 2) 1) 1) 1) 1) 1, rem (quot (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) + rem (1 * (1 * (1 * 0 + i696) + i697)) 1) + i776)) 2) 2) 1) 1) 1) 1, rem (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) + rem (1 * (1 * (1 * 0 + i696) + i697)) 1) + i776)) 2) 2) 1) 1) 1, rem (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) + rem (1 * (1 * (1 * 0 + i696) + i697)) 1) + i776)) 2) 2) 1) 1, rem (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) + rem (1 * (1 * (1 * 0 + i696) + i697)) 1) + i776)) 2) 2) 1, rem (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) + rem (1 * (1 * (1 * 0 + i696) + i697)) 1) + i776)) 2) 2, rem (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) + rem (1 * (1 * (1 * 0 + i696) + i697)) 1) + i776)) 2]))) 2) 2, rem (tmaxIndex (tgather [4] w413 (\\[i781] -> [rem (quot (quot (quot (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) + rem (1 * (1 * (1 * 0 + i696) + i697)) 1) + i781)) 2) 2) 1) 1) 1) 1) 1) 1, rem (quot (quot (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) + rem (1 * (1 * (1 * 0 + i696) + i697)) 1) + i781)) 2) 2) 1) 1) 1) 1) 1, rem (quot (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) + rem (1 * (1 * (1 * 0 + i696) + i697)) 1) + i781)) 2) 2) 1) 1) 1) 1, rem (quot (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) + rem (1 * (1 * (1 * 0 + i696) + i697)) 1) + i781)) 2) 2) 1) 1) 1, rem (quot (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) + rem (1 * (1 * (1 * 0 + i696) + i697)) 1) + i781)) 2) 2) 1) 1, rem (quot (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) + rem (1 * (1 * (1 * 0 + i696) + i697)) 1) + i781)) 2) 2) 1, rem (quot (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) + rem (1 * (1 * (1 * 0 + i696) + i697)) 1) + i781)) 2) 2, rem (1 * (4 * (1 * (1 * (1 * (1 * 0 + rem (quot (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) 1) + rem (quot (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) 1) + rem (quot (1 * (1 * (1 * 0 + i696) + i697)) 1) 1) + rem (1 * (1 * (1 * 0 + i696) + i697)) 1) + i781)) 2]))) 2])))) + ttranspose [1,0] (treplicate 1 v7) in tsum (ttranspose [2,1,0] (treplicate 1 m8) * ttranspose [1,0] (treplicate 10 (tgather [1,1] (tconst (fromList [2] [0.0,1.0])) (\\[i421, i422] -> [ifB (m420 ! [i421, i422] <=* tconst 0.0) 0 1]) * m420))) + ttranspose [1,0] (treplicate 1 v9)"
