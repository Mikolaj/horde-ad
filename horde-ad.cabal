cabal-version:      2.4
-- The cabal-version field refers to the version of the .cabal specification,
-- and can be different from the cabal-install (the tool) version and the
-- Cabal (the library) version you are using. As such, the Cabal (the library)
-- version used must be equal or greater than the version stated in this field.
-- Starting from the specification version 2.2, the cabal-version field must be
-- the first thing in the cabal file.

-- Initial package description 'horde-ad' generated by
-- 'cabal init'. For further documentation, see:
--   http://haskell.org/cabal/users-guide/
--
-- The name of the package.
name:               horde-ad

-- The package version.
-- See the Haskell package versioning policy (PVP) for standards
-- guiding when and how versions should be incremented.
-- https://pvp.haskell.org
-- PVP summary:     +-+------- breaking API changes
--                  | | +----- non-breaking API additions
--                  | | | +--- code changes with no API change
version:            0.1.0.0

-- A short (one-line) description of the package.
synopsis:           Higher Order Reverse Derivatives Efficiently - Automatic Differentiation

-- A longer description of the package.
description:        An Automatic Differentiation library based on the paper "Provably correct, asymptotically efficient, higher-order reverse-mode automatic differentiation" by Faustyna Krawiec, Neel Krishnaswami, Simon Peyton Jones, Tom Ellis, Andrew Fitzgibbon and Richard Eisenberg.

-- The license under which the package is released.
license:            BSD-3-Clause

-- The file containing the license text.
license-file:       LICENSE

-- The package author(s).
author:             Mikolaj Konarski and others

-- An email address to which users can send suggestions, bug reports, and patches.
maintainer:         mikolaj.konarski@funktory.com

category:           Machine Learning, Automatic Differentiation

-- A copyright notice.
-- copyright:
build-type:         Simple

-- Extra doc files to be distributed with the package, such as a CHANGELOG or a README.
extra-doc-files:    CHANGELOG.md

-- Extra source files to be distributed with the package, such as examples, or a tutorial module.
-- extra-source-files:

tested-with:        GHC ==8.10.7 || ==9.0.2 || ==9.2.4

bug-reports:        https://github.com/Mikolaj/horde-ad/issues

source-repository head
  type:               git
  location:           git://github.com/Mikolaj/horde-ad.git

flag with_expensive_assertions
  description:        turn on expensive assertions of well-tested code
  default:            False
  manual:             True

flag release
  description:        remember to set before tagging for a release (to expose internal functions and types, disable tests that depend on not packaged data, etc.)
  default:            False
  manual:             False

flag test_seq
  description:        run the test suite in sequential mode
  default:            False
  manual:             False

flag use_typelits_plugins
  description:        use typelits plugins, without which a lot of functionality needs to be disabled
  default:            True
  manual:             False

common options
  default-language:   Haskell2010
  default-extensions: MonoLocalBinds, ScopedTypeVariables, OverloadedStrings,
                      BangPatterns, RecordWildCards, NamedFieldPuns, MultiWayIf,
                      LambdaCase, DefaultSignatures, InstanceSigs,
                      PatternSynonyms, StrictData, TypeApplications,
                      FlexibleContexts, NoStarIsType
  other-extensions:   TemplateHaskell, MultiParamTypeClasses, RankNTypes,
                      TypeFamilies, FlexibleInstances,
                      DeriveFunctor, FunctionalDependencies,
                      GeneralizedNewtypeDeriving, TupleSections,
                      DeriveFoldable, DeriveTraversable,
                      ExistentialQuantification, GADTs, StandaloneDeriving,
                      DataKinds, KindSignatures, DeriveGeneric, DeriveLift, CPP
  ghc-options:        -Wall -Wcompat -Worphans -Wincomplete-uni-patterns -Wincomplete-record-updates -Wimplicit-prelude -Wmissing-home-modules -Widentities -Wredundant-constraints -Wmissing-export-lists -Wpartial-fields -Wunused-packages
  ghc-options:        -fno-ignore-asserts

  -- Disabling this breaks performance:
  ghc-options:        -fexpose-all-unfoldings -fspecialise-aggressively -fsimpl-tick-factor=200

  ghc-options:        -Wmissed-specialisations

  if flag(with_expensive_assertions)
    cpp-options:      -DWITH_EXPENSIVE_ASSERTIONS

  if flag(release)
    cpp-options:      -DEXPOSE_INTERNAL

common exe-options
  ghc-options:        -rtsopts
  -- Make GC more predictable in benchmarks.
  ghc-options:        "-with-rtsopts=-H1.5g -A0.75g -I0"

common exe-options-test
  ghc-options:        -rtsopts -threaded
  if flag(test_seq)
    ghc-options:      "-with-rtsopts=-H1.5g -A0.75g -I0"
  else
    -- Beware, -with-rtsopts is not cumulative!
    ghc-options:      "-with-rtsopts=-H1.5g -A0.75g -I0 -N"

library
    -- Import common warning flags.
    import:           options

    -- Modules exported by the library.
    exposed-modules:  HordeAd
                      HordeAd.Core.DualNumber
                      HordeAd.Core.Engine
                      HordeAd.Core.DualClass
                      HordeAd.Core.Optimizer
                      HordeAd.Core.OptimizerTools
                      HordeAd.Core.OutdatedOptimizer
                      HordeAd.Core.PairOfVectors
                      HordeAd.Internal.Delta
                      HordeAd.Internal.MatrixOuter
                      HordeAd.Internal.OrthotopeOrphanInstances
                      HordeAd.Tool.MnistData
                      HordeAd.Tool.MnistFcnnMatrix
                      HordeAd.Tool.MnistFcnnScalar
                      HordeAd.Tool.MnistFcnnVector

  if flag(use_typelits_plugins) {
    exposed-modules:  HordeAd.Tool.MnistCnnShaped
                      HordeAd.Tool.MnistFcnnShaped
                      HordeAd.Tool.MnistRnnShaped
  }

    -- Modules included in this library but not exported.
    -- other-modules:

    -- LANGUAGE extensions used by modules in this package.
    -- other-extensions:

    -- Other library packages from which modules are imported.
    build-depends:
        assert-failure
      , base >= 4.14 && < 99
      , bytestring
      , containers
      , hmatrix
      , ilist
      , mnist-idx
      , mono-traversable
      , orthotope
      , pretty-show
      , random
      , strict-containers
      , unboxed-ref
      , vector
      , zlib

  if flag(use_typelits_plugins) {
    build-depends:
        ghc-typelits-knownnat
      , ghc-typelits-natnormalise
  }

    -- Directories containing source files.
    hs-source-dirs:   src

-- The data files for this are not included in the cabal package,
-- hence 'buildable: False'.
library testLibrary
    -- Import common warning flags.
    import:           options

    if flag(release)
      buildable: False
    else
      buildable: True

    -- Modules exported by the library.
    exposed-modules:  TestCommon
                      TestCommonEqEpsilon
                      TestConditionalSynth
                      TestOutdated

  if flag(use_typelits_plugins) {
    exposed-modules:  TestMnistCNN
                      TestMnistFCNN
                      TestMnistRNN
                      TestSimpleDescent
                      TestSingleGradient
  }

    -- Other library packages from which modules are imported.
    build-depends:
        base
      , deepseq
      , hmatrix
      , horde-ad
      , ilist
      , orthotope
      , random
      , storable-tuple
      , strict-containers
      , tasty >= 1.0
      , tasty-hunit
      , tasty-quickcheck
      , time
      , vector

  if flag(use_typelits_plugins) {
    build-depends:
        ghc-typelits-knownnat
      , ghc-typelits-natnormalise
  }

    -- Directories containing source files.
    hs-source-dirs:   test/common

-- These tests don't require any dataset, so can be enabled in Hackage package.
-- This is fully contained in shortTestForCI, so CI doesn't need to run it.
test-suite minimalTest
    import:           options, exe-options-test

    -- The interface type and version of the test suite.
    type:             exitcode-stdio-1.0

    -- Directories containing source files.
    hs-source-dirs:   test

    -- The entrypoint to the test suite.
    main-is:          MinimalTest.hs

    -- Test dependencies.
    build-depends: testLibrary
      , base
      , tasty >= 1.0

  if flag(use_typelits_plugins) {
    build-depends:
        ghc-typelits-knownnat
      , ghc-typelits-natnormalise
  }

-- The data files for this are not included in the cabal package,
-- hence 'buildable: False'.
test-suite shortTestForCI
    import:           options, exe-options-test

    if flag(release)
      buildable: False
    else
      buildable: True

    -- The interface type and version of the test suite.
    type:             exitcode-stdio-1.0

    -- Directories containing source files.
    hs-source-dirs:   test

    -- The entrypoint to the test suite.
    main-is:          ShortTestForCI.hs

    -- Test dependencies.
    build-depends: testLibrary
      , base
      , tasty >= 1.0

  if flag(use_typelits_plugins) {
    build-depends:
        ghc-typelits-knownnat
      , ghc-typelits-natnormalise
  }

-- The data files for this are not included in the cabal package,
-- hence 'buildable: False'.
test-suite extremelyLongTest
    import:           options, exe-options-test

    if flag(release)
      buildable: False
    else
      buildable: True

    -- The interface type and version of the test suite.
    type:             exitcode-stdio-1.0

    -- Directories containing source files.
    hs-source-dirs:   test

    -- The entrypoint to the test suite.
    main-is:          ExtremelyLongTest.hs

    -- Test dependencies.
    build-depends: testLibrary
      , base
      , tasty >= 1.0

  if flag(use_typelits_plugins) {
    build-depends:
        ghc-typelits-knownnat
      , ghc-typelits-natnormalise
  }

library benchLibrary
    import:           options

    if flag(release)
      buildable: False
    else
      buildable: True

    exposed-modules:  BenchProdTools
                      BenchMnistTools

    build-depends:
        base
      , criterion
      , deepseq
      , hmatrix
      , horde-ad
      , ilist
      , random
      , vector

    hs-source-dirs:   bench/common

benchmark longProdBench
    import:           options, exe-options

    if flag(release)
      buildable: False
    else
      buildable: True

    type:             exitcode-stdio-1.0
    hs-source-dirs:   bench
    main-is:          LongProdBench.hs
    other-modules:
    build-depends: benchLibrary
      , base
      , criterion
      , deepseq
      , random

benchmark shortProdForCI
    import:           options, exe-options

    if flag(release)
      buildable: False
    else
      buildable: True

    type:             exitcode-stdio-1.0
    hs-source-dirs:   bench
    main-is:          ShortProdForCI.hs
    build-depends: benchLibrary
      , base
      , criterion
      , deepseq
      , random

-- The data files for this are not included in the cabal package,
-- hence 'buildable: False'.
benchmark longMnistBench
    import:           options, exe-options

    if flag(release)
      buildable: False
    else
      buildable: True

    type:             exitcode-stdio-1.0
    hs-source-dirs:   bench
    main-is:          LongMnistBench.hs
    build-depends: benchLibrary
      , base
      , criterion
      , horde-ad
      , random

-- The data files for this are not included in the cabal package,
-- hence 'buildable: False'.
benchmark shortMnistForCI
    import:           options, exe-options

    if flag(release)
      buildable: False
    else
      buildable: True

    type:             exitcode-stdio-1.0
    hs-source-dirs:   bench
    main-is:          ShortMnistForCI.hs
    build-depends: benchLibrary
      , base
      , criterion
      , horde-ad
      , random

-- takes forever, so mostly to invoke with --benchmark-options='-n 1 +RTS -s'
benchmark realisticMnistBench
    import:           options, exe-options

    if flag(release)
      buildable: False
    else
      buildable: True

    type:             exitcode-stdio-1.0
    hs-source-dirs:   bench
    main-is:          RealisticMnistBench.hs
    build-depends: benchLibrary
      , base
      , criterion
      , horde-ad
      , random
